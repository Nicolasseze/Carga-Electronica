
Carga_Electronica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800487c  0800487c  0001487c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048c4  080048c4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048cc  080048cc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080048d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000411c  20000010  080048e4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000412c  080048e4  0002412c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f409  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002635  00000000  00000000  0002f449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00031a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00032918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a6c  00000000  00000000  000336a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001104b  00000000  00000000  0004c10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b697  00000000  00000000  0005d157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f87ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c00  00000000  00000000  000f8840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004864 	.word	0x08004864

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004864 	.word	0x08004864

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <ADC_read_tension>:


/* Private functions ---------------------------------------------------------*/
static void ADC_set (I2C_HandleTypeDef *hi2c, enum input_to_measure entrada);

uint16_t ADC_read_tension (I2C_HandleTypeDef *hi2c){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af02      	add	r7, sp, #8
 80004ea:	6078      	str	r0, [r7, #4]

	uint8_t buffer[2];
	uint16_t buffer16;

	ADC_set(hi2c, tension);
 80004ec:	2100      	movs	r1, #0
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f000 f83c 	bl	800056c <ADC_set>

	HAL_I2C_Master_Receive(hi2c, ADC_ADDR, buffer, 2, HAL_MAX_DELAY);
 80004f4:	f107 020c 	add.w	r2, r7, #12
 80004f8:	f04f 33ff 	mov.w	r3, #4294967295
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2302      	movs	r3, #2
 8000500:	2190      	movs	r1, #144	; 0x90
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f001 fcf8 	bl	8001ef8 <HAL_I2C_Master_Receive>

	buffer16 = buffer[0] << 8 || buffer[1];
 8000508:	7b3b      	ldrb	r3, [r7, #12]
 800050a:	021b      	lsls	r3, r3, #8
 800050c:	2b00      	cmp	r3, #0
 800050e:	d102      	bne.n	8000516 <ADC_read_tension+0x32>
 8000510:	7b7b      	ldrb	r3, [r7, #13]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <ADC_read_tension+0x36>
 8000516:	2301      	movs	r3, #1
 8000518:	e000      	b.n	800051c <ADC_read_tension+0x38>
 800051a:	2300      	movs	r3, #0
 800051c:	81fb      	strh	r3, [r7, #14]

	return buffer16;
 800051e:	89fb      	ldrh	r3, [r7, #14]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <ADC_read_corriente>:

uint16_t ADC_read_corriente (I2C_HandleTypeDef *hi2c){
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af02      	add	r7, sp, #8
 800052e:	6078      	str	r0, [r7, #4]

	uint8_t buffer[2];
	uint16_t buffer16;

	ADC_set(hi2c, corriente);
 8000530:	2101      	movs	r1, #1
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f000 f81a 	bl	800056c <ADC_set>

	HAL_I2C_Master_Receive(hi2c, ADC_ADDR, buffer, 2, HAL_MAX_DELAY);
 8000538:	f107 020c 	add.w	r2, r7, #12
 800053c:	f04f 33ff 	mov.w	r3, #4294967295
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2302      	movs	r3, #2
 8000544:	2190      	movs	r1, #144	; 0x90
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f001 fcd6 	bl	8001ef8 <HAL_I2C_Master_Receive>

	buffer16 = buffer[0] << 8 || buffer[1];
 800054c:	7b3b      	ldrb	r3, [r7, #12]
 800054e:	021b      	lsls	r3, r3, #8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d102      	bne.n	800055a <ADC_read_corriente+0x32>
 8000554:	7b7b      	ldrb	r3, [r7, #13]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <ADC_read_corriente+0x36>
 800055a:	2301      	movs	r3, #1
 800055c:	e000      	b.n	8000560 <ADC_read_corriente+0x38>
 800055e:	2300      	movs	r3, #0
 8000560:	81fb      	strh	r3, [r7, #14]

	return buffer16;
 8000562:	89fb      	ldrh	r3, [r7, #14]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <ADC_set>:


static void ADC_set (I2C_HandleTypeDef *hi2c, enum input_to_measure entrada){
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	70fb      	strb	r3, [r7, #3]

	uint8_t buffer[3];
	uint16_t buffer16;

	buffer[0] = (uint8_t)CONFIG_REGISTER;
 8000578:	2301      	movs	r3, #1
 800057a:	723b      	strb	r3, [r7, #8]
	if( entrada == tension){
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d102      	bne.n	8000588 <ADC_set+0x1c>
		buffer16 = GET_CONFIG_REGISTER(ADC_OS,AIN_VOLTAGE,ADC_PGA,ADC_MODE,ADC_SPS,ADC_COMP_MODE,ADC_COMP_POL,ADC_COMP_LAT,ADC_COMP_QUE);
 8000582:	2301      	movs	r3, #1
 8000584:	81fb      	strh	r3, [r7, #14]
 8000586:	e004      	b.n	8000592 <ADC_set+0x26>
	}
	else if( entrada == corriente ){
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d101      	bne.n	8000592 <ADC_set+0x26>
		buffer16 = GET_CONFIG_REGISTER(ADC_OS,AIN_CURRENT,ADC_PGA,ADC_MODE,ADC_SPS,ADC_COMP_MODE,ADC_COMP_POL,ADC_COMP_LAT,ADC_COMP_QUE);
 800058e:	2301      	movs	r3, #1
 8000590:	81fb      	strh	r3, [r7, #14]
	}

	buffer[1] = (uint8_t)(buffer16 >> 8);
 8000592:	89fb      	ldrh	r3, [r7, #14]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b29b      	uxth	r3, r3
 8000598:	b2db      	uxtb	r3, r3
 800059a:	727b      	strb	r3, [r7, #9]
	buffer[2] = (uint8_t)(buffer16);
 800059c:	89fb      	ldrh	r3, [r7, #14]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	72bb      	strb	r3, [r7, #10]

	HAL_I2C_Master_Transmit(hi2c, ADC_ADDR, buffer, 3, HAL_MAX_DELAY);
 80005a2:	f107 0208 	add.w	r2, r7, #8
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2303      	movs	r3, #3
 80005ae:	2190      	movs	r1, #144	; 0x90
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f001 fba3 	bl	8001cfc <HAL_I2C_Master_Transmit>
	//delay

	buffer[0] = (uint8_t)CONVERSION_REGISTER;
 80005b6:	2300      	movs	r3, #0
 80005b8:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c, ADC_ADDR, buffer, 1, HAL_MAX_DELAY);
 80005ba:	f107 0208 	add.w	r2, r7, #8
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2301      	movs	r3, #1
 80005c6:	2190      	movs	r1, #144	; 0x90
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f001 fb97 	bl	8001cfc <HAL_I2C_Master_Transmit>
}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <vApplicationGetIdleTaskMemory+0x2c>)
 80005e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <vApplicationGetIdleTaskMemory+0x30>)
 80005ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	2000002c 	.word	0x2000002c
 8000608:	20000080 	.word	0x20000080

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fcc7 	bl	8000fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f823 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f975 	bl	8000908 <MX_GPIO_Init>
  MX_ADC1_Init();
 800061e:	f000 f887 	bl	8000730 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000622:	f000 f8d7 	bl	80007d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000626:	f000 f903 	bl	8000830 <MX_SPI1_Init>
  MX_SPI2_Init();
 800062a:	f000 f937 	bl	800089c <MX_SPI2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <main+0x4c>)
 8000630:	1d3c      	adds	r4, r7, #4
 8000632:	461d      	mov	r5, r3
 8000634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fe97 	bl	8003378 <osThreadCreate>
 800064a:	4603      	mov	r3, r0
 800064c:	4a03      	ldr	r2, [pc, #12]	; (800065c <main+0x50>)
 800064e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000650:	f002 fe8b 	bl	800336a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000654:	e7fe      	b.n	8000654 <main+0x48>
 8000656:	bf00      	nop
 8000658:	08004888 	.word	0x08004888
 800065c:	200003cc 	.word	0x200003cc

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 f8f0 	bl	8004854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b27      	ldr	r3, [pc, #156]	; (8000728 <SystemClock_Config+0xc8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a26      	ldr	r2, [pc, #152]	; (8000728 <SystemClock_Config+0xc8>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b24      	ldr	r3, [pc, #144]	; (8000728 <SystemClock_Config+0xc8>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <SystemClock_Config+0xcc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a20      	ldr	r2, [pc, #128]	; (800072c <SystemClock_Config+0xcc>)
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <SystemClock_Config+0xcc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006bc:	2301      	movs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006d0:	230c      	movs	r3, #12
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006d4:	2360      	movs	r3, #96	; 0x60
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f95b 	bl	80029a0 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 fabc 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2103      	movs	r1, #3
 8000710:	4618      	mov	r0, r3
 8000712:	f002 fbbd 	bl	8002e90 <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800071c:	f000 faa6 	bl	8000c6c <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	3750      	adds	r7, #80	; 0x50
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	463b      	mov	r3, r7
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <MX_ADC1_Init+0x9c>)
 8000746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_ADC1_Init+0x98>)
 800074a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800074e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000750:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_ADC1_Init+0xa0>)
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_ADC1_Init+0x98>)
 800077e:	2201      	movs	r2, #1
 8000780:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_ADC1_Init+0x98>)
 800078c:	2201      	movs	r2, #1
 800078e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_ADC1_Init+0x98>)
 8000792:	f000 fc79 	bl	8001088 <HAL_ADC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800079c:	f000 fa66 	bl	8000c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007a0:	2308      	movs	r3, #8
 80007a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_ADC1_Init+0x98>)
 80007b2:	f000 fcad 	bl	8001110 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007bc:	f000 fa56 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000280 	.word	0x20000280
 80007cc:	40012000 	.word	0x40012000
 80007d0:	0f000001 	.word	0x0f000001

080007d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_I2C1_Init+0x50>)
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <MX_I2C1_Init+0x54>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_I2C1_Init+0x50>)
 80007e0:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_I2C1_Init+0x58>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_I2C1_Init+0x50>)
 80007f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_I2C1_Init+0x50>)
 8000812:	f001 f92f 	bl	8001a74 <HAL_I2C_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800081c:	f000 fa26 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200002c8 	.word	0x200002c8
 8000828:	40005400 	.word	0x40005400
 800082c:	00061a80 	.word	0x00061a80

08000830 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_SPI1_Init+0x64>)
 8000836:	4a18      	ldr	r2, [pc, #96]	; (8000898 <MX_SPI1_Init+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_SPI1_Init+0x64>)
 800083c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000840:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_SPI1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_SPI1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_SPI1_Init+0x64>)
 800085c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000860:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_SPI1_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_SPI1_Init+0x64>)
 800087c:	220a      	movs	r2, #10
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_SPI1_Init+0x64>)
 8000882:	f002 fcd1 	bl	8003228 <HAL_SPI_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800088c:	f000 f9ee 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000031c 	.word	0x2000031c
 8000898:	40013000 	.word	0x40013000

0800089c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_SPI2_Init+0x64>)
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <MX_SPI2_Init+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_SPI2_Init+0x64>)
 80008a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_SPI2_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_SPI2_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_SPI2_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_SPI2_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_SPI2_Init+0x64>)
 80008c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_SPI2_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_SPI2_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_SPI2_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_SPI2_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_SPI2_Init+0x64>)
 80008e8:	220a      	movs	r2, #10
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_SPI2_Init+0x64>)
 80008ee:	f002 fc9b 	bl	8003228 <HAL_SPI_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008f8:	f000 f9b8 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000374 	.word	0x20000374
 8000904:	40003800 	.word	0x40003800

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b48      	ldr	r3, [pc, #288]	; (8000a44 <MX_GPIO_Init+0x13c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a47      	ldr	r2, [pc, #284]	; (8000a44 <MX_GPIO_Init+0x13c>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b45      	ldr	r3, [pc, #276]	; (8000a44 <MX_GPIO_Init+0x13c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <MX_GPIO_Init+0x13c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a40      	ldr	r2, [pc, #256]	; (8000a44 <MX_GPIO_Init+0x13c>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b3e      	ldr	r3, [pc, #248]	; (8000a44 <MX_GPIO_Init+0x13c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b3a      	ldr	r3, [pc, #232]	; (8000a44 <MX_GPIO_Init+0x13c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a39      	ldr	r2, [pc, #228]	; (8000a44 <MX_GPIO_Init+0x13c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <MX_GPIO_Init+0x13c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <MX_GPIO_Init+0x13c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a32      	ldr	r2, [pc, #200]	; (8000a44 <MX_GPIO_Init+0x13c>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b30      	ldr	r3, [pc, #192]	; (8000a44 <MX_GPIO_Init+0x13c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ETH_RST_Pin|ETH_CS_Pin|I_SCALE_Pin|USER_LED_Pin
 800098e:	2200      	movs	r2, #0
 8000990:	f641 2118 	movw	r1, #6680	; 0x1a18
 8000994:	482c      	ldr	r0, [pc, #176]	; (8000a48 <MX_GPIO_Init+0x140>)
 8000996:	f001 f853 	bl	8001a40 <HAL_GPIO_WritePin>
                          |V_SCALE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TRIGGER_Pin CONX_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin|CONX_Pin;
 800099a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4826      	ldr	r0, [pc, #152]	; (8000a4c <MX_GPIO_Init+0x144>)
 80009b2:	f000 fec1 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERROR2_Pin */
  GPIO_InitStruct.Pin = ERROR2_Pin;
 80009b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ERROR2_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4820      	ldr	r0, [pc, #128]	; (8000a4c <MX_GPIO_Init+0x144>)
 80009cc:	f000 feb4 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_RST_Pin ETH_CS_Pin I_SCALE_Pin USER_LED_Pin
                           V_SCALE_Pin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|ETH_CS_Pin|I_SCALE_Pin|USER_LED_Pin
 80009d0:	f641 2318 	movw	r3, #6680	; 0x1a18
 80009d4:	617b      	str	r3, [r7, #20]
                          |V_SCALE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4817      	ldr	r0, [pc, #92]	; (8000a48 <MX_GPIO_Init+0x140>)
 80009ea:	f000 fea5 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERROR1_Pin */
  GPIO_InitStruct.Pin = ERROR1_Pin;
 80009ee:	2302      	movs	r3, #2
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ERROR1_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	4813      	ldr	r0, [pc, #76]	; (8000a50 <MX_GPIO_Init+0x148>)
 8000a02:	f000 fe99 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_KEY_Pin */
  GPIO_InitStruct.Pin = USER_KEY_Pin;
 8000a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_KEY_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480b      	ldr	r0, [pc, #44]	; (8000a48 <MX_GPIO_Init+0x140>)
 8000a1c:	f000 fe8c 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_RDY_Pin */
  GPIO_InitStruct.Pin = ADC_RDY_Pin;
 8000a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_RDY_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_GPIO_Init+0x148>)
 8000a38:	f000 fe7e 	bl	8001738 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3728      	adds	r7, #40	; 0x28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020800 	.word	0x40020800
 8000a50:	40020400 	.word	0x40020400

08000a54 <DAC_init>:

/* USER CODE BEGIN 4 */
void DAC_init(void){	//NOK
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af02      	add	r7, sp, #8
	//Leer EEPROM y checkear que este en 0; Sino cambiarlo.
	uint8_t buffer[5];
	memset(buffer,0,5);
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2205      	movs	r2, #5
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 fef7 	bl	8004854 <memset>
	HAL_I2C_Master_Transmit(&hi2c1,MCP4725_ADDR, buffer, 2,HAL_MAX_DELAY);
 8000a66:	463a      	mov	r2, r7
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2302      	movs	r3, #2
 8000a70:	21c0      	movs	r1, #192	; 0xc0
 8000a72:	482d      	ldr	r0, [pc, #180]	; (8000b28 <DAC_init+0xd4>)
 8000a74:	f001 f942 	bl	8001cfc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MCP4725_ADDR, buffer, 5,HAL_MAX_DELAY);
 8000a78:	463a      	mov	r2, r7
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	2305      	movs	r3, #5
 8000a82:	21c0      	movs	r1, #192	; 0xc0
 8000a84:	4828      	ldr	r0, [pc, #160]	; (8000b28 <DAC_init+0xd4>)
 8000a86:	f001 fa37 	bl	8001ef8 <HAL_I2C_Master_Receive>
	//Cargo el valor recibido del buffer a una variable para tener el valor de la eeprom.
	i2cRX = (buffer[3]<<8) || buffer[4];
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	021b      	lsls	r3, r3, #8
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d102      	bne.n	8000a98 <DAC_init+0x44>
 8000a92:	793b      	ldrb	r3, [r7, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <DAC_init+0x48>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e000      	b.n	8000a9e <DAC_init+0x4a>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <DAC_init+0xd8>)
 8000aa2:	801a      	strh	r2, [r3, #0]
	//Mascareo de rutix
	i2cRX &= MASK_DAC_READ;
 8000aa4:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <DAC_init+0xd8>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	f003 030f 	and.w	r3, r3, #15
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <DAC_init+0xd8>)
 8000ab0:	801a      	strh	r2, [r3, #0]

	//Si el valor de la eeprom no es 0 lo cargo.
	if(i2cRX){
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <DAC_init+0xd8>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d025      	beq.n	8000b06 <DAC_init+0xb2>
		buffer[0]=0b01100000;
 8000aba:	2360      	movs	r3, #96	; 0x60
 8000abc:	703b      	strb	r3, [r7, #0]
		buffer[1]=0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	707b      	strb	r3, [r7, #1]
		buffer[2]=0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Master_Transmit(&hi2c1, MCP4725_ADDR, buffer, 3,HAL_MAX_DELAY);
 8000ac6:	463a      	mov	r2, r7
 8000ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2303      	movs	r3, #3
 8000ad0:	21c0      	movs	r1, #192	; 0xc0
 8000ad2:	4815      	ldr	r0, [pc, #84]	; (8000b28 <DAC_init+0xd4>)
 8000ad4:	f001 f912 	bl	8001cfc <HAL_I2C_Master_Transmit>
		do{
			i2cRX = HAL_I2C_Master_Receive(&hi2c1, MCP4725_ADDR, buffer, 1,HAL_MAX_DELAY) && 0b10000000;
 8000ad8:	463a      	mov	r2, r7
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	21c0      	movs	r1, #192	; 0xc0
 8000ae4:	4810      	ldr	r0, [pc, #64]	; (8000b28 <DAC_init+0xd4>)
 8000ae6:	f001 fa07 	bl	8001ef8 <HAL_I2C_Master_Receive>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <DAC_init+0xa0>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <DAC_init+0xa2>
 8000af4:	2300      	movs	r3, #0
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <DAC_init+0xd8>)
 8000afa:	801a      	strh	r2, [r3, #0]
		}while(!i2cRX);
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <DAC_init+0xd8>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0e9      	beq.n	8000ad8 <DAC_init+0x84>
		//Reset
		buffer[0]=0;
		buffer[1]=0;
		HAL_I2C_Master_Transmit(&hi2c1, MCP4725_ADDR, buffer, 2,HAL_MAX_DELAY);
	}
}
 8000b04:	e00c      	b.n	8000b20 <DAC_init+0xcc>
		buffer[0]=0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	703b      	strb	r3, [r7, #0]
		buffer[1]=0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	707b      	strb	r3, [r7, #1]
		HAL_I2C_Master_Transmit(&hi2c1, MCP4725_ADDR, buffer, 2,HAL_MAX_DELAY);
 8000b0e:	463a      	mov	r2, r7
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2302      	movs	r3, #2
 8000b18:	21c0      	movs	r1, #192	; 0xc0
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <DAC_init+0xd4>)
 8000b1c:	f001 f8ee 	bl	8001cfc <HAL_I2C_Master_Transmit>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200002c8 	.word	0x200002c8
 8000b2c:	200003d0 	.word	0x200003d0

08000b30 <DAC_set>:
void DAC_set(float setPoint){	//setPoint = valor en mV.
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af02      	add	r7, sp, #8
 8000b36:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t buffer[2];

	if(setPoint<0 || setPoint>=5000)
 8000b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b46:	d408      	bmi.n	8000b5a <DAC_set+0x2a>
 8000b48:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b4c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000bd0 <DAC_set+0xa0>
 8000b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b58:	db09      	blt.n	8000b6e <DAC_set+0x3e>
		return HAL_I2C_Master_Transmit(&hi2c1, MCP4725_ADDR, 0, 2,HAL_MAX_DELAY);
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2302      	movs	r3, #2
 8000b62:	2200      	movs	r2, #0
 8000b64:	21c0      	movs	r1, #192	; 0xc0
 8000b66:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <DAC_set+0xa4>)
 8000b68:	f001 f8c8 	bl	8001cfc <HAL_I2C_Master_Transmit>
 8000b6c:	e02d      	b.n	8000bca <DAC_set+0x9a>

	setPoint=((setPoint+CAL_DAC_VALUE)*4096)/5000;
 8000b6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b72:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000bd8 <DAC_set+0xa8>
 8000b76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b7a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000bdc <DAC_set+0xac>
 8000b7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b82:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000bd0 <DAC_set+0xa0>
 8000b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b8a:	edc7 7a01 	vstr	s15, [r7, #4]
	buffer[0]=((uint16_t) setPoint)>>8;
 8000b8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b96:	ee17 3a90 	vmov	r3, s15
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	733b      	strb	r3, [r7, #12]
	buffer[1]=((uint16_t) setPoint);
 8000ba4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bac:	ee17 3a90 	vmov	r3, s15
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, MCP4725_ADDR, buffer, 2,HAL_MAX_DELAY);
 8000bb6:	f107 020c 	add.w	r2, r7, #12
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	21c0      	movs	r1, #192	; 0xc0
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <DAC_set+0xa4>)
 8000bc6:	f001 f899 	bl	8001cfc <HAL_I2C_Master_Transmit>
}
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	459c4000 	.word	0x459c4000
 8000bd4:	200002c8 	.word	0x200002c8
 8000bd8:	00000000 	.word	0x00000000
 8000bdc:	45800000 	.word	0x45800000

08000be0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	DAC_init();
 8000be8:	f7ff ff34 	bl	8000a54 <DAC_init>


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bec:	2001      	movs	r0, #1
 8000bee:	f002 fc0f 	bl	8003410 <osDelay>
    DAC_set(100);
 8000bf2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000c48 <StartDefaultTask+0x68>
 8000bf6:	f7ff ff9b 	bl	8000b30 <DAC_set>
    DAC_set(500);
 8000bfa:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8000c4c <StartDefaultTask+0x6c>
 8000bfe:	f7ff ff97 	bl	8000b30 <DAC_set>
    DAC_set(1000);
 8000c02:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8000c50 <StartDefaultTask+0x70>
 8000c06:	f7ff ff93 	bl	8000b30 <DAC_set>
    DAC_set(2000);
 8000c0a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8000c54 <StartDefaultTask+0x74>
 8000c0e:	f7ff ff8f 	bl	8000b30 <DAC_set>
    DAC_set(4000);
 8000c12:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000c58 <StartDefaultTask+0x78>
 8000c16:	f7ff ff8b 	bl	8000b30 <DAC_set>
    DAC_set(4999);
 8000c1a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8000c5c <StartDefaultTask+0x7c>
 8000c1e:	f7ff ff87 	bl	8000b30 <DAC_set>
    DAC_set(7000);
 8000c22:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000c60 <StartDefaultTask+0x80>
 8000c26:	f7ff ff83 	bl	8000b30 <DAC_set>
    DAC_set(2500);
 8000c2a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8000c64 <StartDefaultTask+0x84>
 8000c2e:	f7ff ff7f 	bl	8000b30 <DAC_set>
    DAC_set(-10);
 8000c32:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8000c36:	f7ff ff7b 	bl	8000b30 <DAC_set>

    ADC_read_corriente(&hi2c1);
 8000c3a:	480b      	ldr	r0, [pc, #44]	; (8000c68 <StartDefaultTask+0x88>)
 8000c3c:	f7ff fc74 	bl	8000528 <ADC_read_corriente>
    ADC_read_tension(&hi2c1);
 8000c40:	4809      	ldr	r0, [pc, #36]	; (8000c68 <StartDefaultTask+0x88>)
 8000c42:	f7ff fc4f 	bl	80004e4 <ADC_read_tension>
    osDelay(1);
 8000c46:	e7d1      	b.n	8000bec <StartDefaultTask+0xc>
 8000c48:	42c80000 	.word	0x42c80000
 8000c4c:	43fa0000 	.word	0x43fa0000
 8000c50:	447a0000 	.word	0x447a0000
 8000c54:	44fa0000 	.word	0x44fa0000
 8000c58:	457a0000 	.word	0x457a0000
 8000c5c:	459c3800 	.word	0x459c3800
 8000c60:	45dac000 	.word	0x45dac000
 8000c64:	451c4000 	.word	0x451c4000
 8000c68:	200002c8 	.word	0x200002c8

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <Error_Handler+0x8>
	...

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_MspInit+0x54>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a11      	ldr	r2, [pc, #68]	; (8000ccc <HAL_MspInit+0x54>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <HAL_MspInit+0x54>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_MspInit+0x54>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_MspInit+0x54>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_MspInit+0x54>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	210f      	movs	r1, #15
 8000cba:	f06f 0001 	mvn.w	r0, #1
 8000cbe:	f000 fd12 	bl	80016e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <HAL_ADC_MspInit+0x7c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d127      	bne.n	8000d42 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <HAL_ADC_MspInit+0x80>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <HAL_ADC_MspInit+0x80>)
 8000cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <HAL_ADC_MspInit+0x80>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <HAL_ADC_MspInit+0x80>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <HAL_ADC_MspInit+0x80>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <HAL_ADC_MspInit+0x80>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = LM35_Pin;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LM35_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_ADC_MspInit+0x84>)
 8000d3e:	f000 fcfb 	bl	8001738 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	; 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40012000 	.word	0x40012000
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020400 	.word	0x40020400

08000d58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_I2C_MspInit+0x84>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12b      	bne.n	8000dd2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000d96:	23c0      	movs	r3, #192	; 0xc0
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9a:	2312      	movs	r3, #18
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da6:	2304      	movs	r3, #4
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <HAL_I2C_MspInit+0x8c>)
 8000db2:	f000 fcc1 	bl	8001738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020400 	.word	0x40020400

08000de8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	; 0x30
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a32      	ldr	r2, [pc, #200]	; (8000ed0 <HAL_SPI_MspInit+0xe8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d12c      	bne.n	8000e64 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <HAL_SPI_MspInit+0xec>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a30      	ldr	r2, [pc, #192]	; (8000ed4 <HAL_SPI_MspInit+0xec>)
 8000e14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <HAL_SPI_MspInit+0xec>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <HAL_SPI_MspInit+0xec>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a29      	ldr	r2, [pc, #164]	; (8000ed4 <HAL_SPI_MspInit+0xec>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <HAL_SPI_MspInit+0xec>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ETH_SCK_Pin|ETH_MISO_Pin|ETH_MOSI_Pin;
 8000e42:	23e0      	movs	r3, #224	; 0xe0
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e52:	2305      	movs	r3, #5
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	481e      	ldr	r0, [pc, #120]	; (8000ed8 <HAL_SPI_MspInit+0xf0>)
 8000e5e:	f000 fc6b 	bl	8001738 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e62:	e031      	b.n	8000ec8 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <HAL_SPI_MspInit+0xf4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d12c      	bne.n	8000ec8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_SPI_MspInit+0xec>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_SPI_MspInit+0xec>)
 8000e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_SPI_MspInit+0xec>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_SPI_MspInit+0xec>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <HAL_SPI_MspInit+0xec>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_SPI_MspInit+0xec>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UX_SCK_Pin|UX_MISO_Pin|UX_MOSI_Pin;
 8000ea6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eb8:	2305      	movs	r3, #5
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <HAL_SPI_MspInit+0xf8>)
 8000ec4:	f000 fc38 	bl	8001738 <HAL_GPIO_Init>
}
 8000ec8:	bf00      	nop
 8000eca:	3730      	adds	r7, #48	; 0x30
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40013000 	.word	0x40013000
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40003800 	.word	0x40003800
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f898 	bl	8001048 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f18:	f002 fffe 	bl	8003f18 <xTaskGetSchedulerState>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d001      	beq.n	8000f26 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f22:	f003 fa39 	bl	8004398 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f6c:	4c0b      	ldr	r4, [pc, #44]	; (8000f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f7a:	f7ff ffd7 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f003 fc45 	bl	800480c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f82:	f7ff fb43 	bl	800060c <main>
  bx  lr    
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f94:	080048d4 	.word	0x080048d4
  ldr r2, =_sbss
 8000f98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f9c:	2000412c 	.word	0x2000412c

08000fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>
	...

08000fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <HAL_Init+0x40>)
 8000fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_Init+0x40>)
 8000fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_Init+0x40>)
 8000fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 fb7f 	bl	80016d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	200f      	movs	r0, #15
 8000fd4:	f000 f808 	bl	8000fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f7ff fe4e 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023c00 	.word	0x40023c00

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x54>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x58>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fb89 	bl	800171e <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 fb5f 	bl	80016e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_InitTick+0x5c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000008 	.word	0x20000008
 8001044:	20000004 	.word	0x20000004

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008
 800106c:	200003d4 	.word	0x200003d4

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200003d4 	.word	0x200003d4

08001088 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e033      	b.n	8001106 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d109      	bne.n	80010ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fe12 	bl	8000cd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d118      	bne.n	80010f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010ce:	f023 0302 	bic.w	r3, r3, #2
 80010d2:	f043 0202 	orr.w	r2, r3, #2
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f94a 	bl	8001374 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f023 0303 	bic.w	r3, r3, #3
 80010ee:	f043 0201 	orr.w	r2, r3, #1
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	641a      	str	r2, [r3, #64]	; 0x40
 80010f6:	e001      	b.n	80010fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001124:	2b01      	cmp	r3, #1
 8001126:	d101      	bne.n	800112c <HAL_ADC_ConfigChannel+0x1c>
 8001128:	2302      	movs	r3, #2
 800112a:	e113      	b.n	8001354 <HAL_ADC_ConfigChannel+0x244>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b09      	cmp	r3, #9
 800113a:	d925      	bls.n	8001188 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68d9      	ldr	r1, [r3, #12]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	3b1e      	subs	r3, #30
 8001152:	2207      	movs	r2, #7
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43da      	mvns	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	400a      	ands	r2, r1
 8001160:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68d9      	ldr	r1, [r3, #12]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	b29b      	uxth	r3, r3
 8001172:	4618      	mov	r0, r3
 8001174:	4603      	mov	r3, r0
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4403      	add	r3, r0
 800117a:	3b1e      	subs	r3, #30
 800117c:	409a      	lsls	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	430a      	orrs	r2, r1
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	e022      	b.n	80011ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6919      	ldr	r1, [r3, #16]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	b29b      	uxth	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	4613      	mov	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	4413      	add	r3, r2
 800119c:	2207      	movs	r2, #7
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	400a      	ands	r2, r1
 80011aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6919      	ldr	r1, [r3, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	4603      	mov	r3, r0
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4403      	add	r3, r0
 80011c4:	409a      	lsls	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d824      	bhi.n	8001220 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	3b05      	subs	r3, #5
 80011e8:	221f      	movs	r2, #31
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	400a      	ands	r2, r1
 80011f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	b29b      	uxth	r3, r3
 8001204:	4618      	mov	r0, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	3b05      	subs	r3, #5
 8001212:	fa00 f203 	lsl.w	r2, r0, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
 800121e:	e04c      	b.n	80012ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b0c      	cmp	r3, #12
 8001226:	d824      	bhi.n	8001272 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	3b23      	subs	r3, #35	; 0x23
 800123a:	221f      	movs	r2, #31
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43da      	mvns	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	400a      	ands	r2, r1
 8001248:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	b29b      	uxth	r3, r3
 8001256:	4618      	mov	r0, r3
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	3b23      	subs	r3, #35	; 0x23
 8001264:	fa00 f203 	lsl.w	r2, r0, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	631a      	str	r2, [r3, #48]	; 0x30
 8001270:	e023      	b.n	80012ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	3b41      	subs	r3, #65	; 0x41
 8001284:	221f      	movs	r2, #31
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	400a      	ands	r2, r1
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	3b41      	subs	r3, #65	; 0x41
 80012ae:	fa00 f203 	lsl.w	r2, r0, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012ba:	4b29      	ldr	r3, [pc, #164]	; (8001360 <HAL_ADC_ConfigChannel+0x250>)
 80012bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a28      	ldr	r2, [pc, #160]	; (8001364 <HAL_ADC_ConfigChannel+0x254>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d10f      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x1d8>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b12      	cmp	r3, #18
 80012ce:	d10b      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <HAL_ADC_ConfigChannel+0x254>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d12b      	bne.n	800134a <HAL_ADC_ConfigChannel+0x23a>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <HAL_ADC_ConfigChannel+0x258>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d003      	beq.n	8001304 <HAL_ADC_ConfigChannel+0x1f4>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b11      	cmp	r3, #17
 8001302:	d122      	bne.n	800134a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a11      	ldr	r2, [pc, #68]	; (8001368 <HAL_ADC_ConfigChannel+0x258>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d111      	bne.n	800134a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <HAL_ADC_ConfigChannel+0x25c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_ADC_ConfigChannel+0x260>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	0c9a      	lsrs	r2, r3, #18
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800133c:	e002      	b.n	8001344 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	3b01      	subs	r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f9      	bne.n	800133e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40012300 	.word	0x40012300
 8001364:	40012000 	.word	0x40012000
 8001368:	10000012 	.word	0x10000012
 800136c:	20000000 	.word	0x20000000
 8001370:	431bde83 	.word	0x431bde83

08001374 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800137c:	4b79      	ldr	r3, [pc, #484]	; (8001564 <ADC_Init+0x1f0>)
 800137e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	431a      	orrs	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6859      	ldr	r1, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	021a      	lsls	r2, r3, #8
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6859      	ldr	r1, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6899      	ldr	r1, [r3, #8]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	4a58      	ldr	r2, [pc, #352]	; (8001568 <ADC_Init+0x1f4>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d022      	beq.n	8001452 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800141a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6899      	ldr	r1, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800143c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6899      	ldr	r1, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	e00f      	b.n	8001472 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001470:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0202 	bic.w	r2, r2, #2
 8001480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6899      	ldr	r1, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7e1b      	ldrb	r3, [r3, #24]
 800148c:	005a      	lsls	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d01b      	beq.n	80014d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6859      	ldr	r1, [r3, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	3b01      	subs	r3, #1
 80014cc:	035a      	lsls	r2, r3, #13
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	e007      	b.n	80014e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	3b01      	subs	r3, #1
 8001504:	051a      	lsls	r2, r3, #20
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800151c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6899      	ldr	r1, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800152a:	025a      	lsls	r2, r3, #9
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6899      	ldr	r1, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	029a      	lsls	r2, r3, #10
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	609a      	str	r2, [r3, #8]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40012300 	.word	0x40012300
 8001568:	0f000001 	.word	0x0f000001

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	; (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
         );
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800169c:	d301      	bcc.n	80016a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169e:	2301      	movs	r3, #1
 80016a0:	e00f      	b.n	80016c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <SysTick_Config+0x40>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016aa:	210f      	movs	r1, #15
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f7ff ff8e 	bl	80015d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <SysTick_Config+0x40>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ba:	4b04      	ldr	r3, [pc, #16]	; (80016cc <SysTick_Config+0x40>)
 80016bc:	2207      	movs	r2, #7
 80016be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	e000e010 	.word	0xe000e010

080016d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff47 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f8:	f7ff ff5c 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 80016fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f7ff ff8e 	bl	8001624 <NVIC_EncodePriority>
 8001708:	4602      	mov	r2, r0
 800170a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff5d 	bl	80015d0 <__NVIC_SetPriority>
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffb0 	bl	800168c <SysTick_Config>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	e159      	b.n	8001a08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001754:	2201      	movs	r2, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	429a      	cmp	r2, r3
 800176e:	f040 8148 	bne.w	8001a02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b01      	cmp	r3, #1
 800177c:	d005      	beq.n	800178a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001786:	2b02      	cmp	r3, #2
 8001788:	d130      	bne.n	80017ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	2203      	movs	r2, #3
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c0:	2201      	movs	r2, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 0201 	and.w	r2, r3, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d017      	beq.n	8001828 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d123      	bne.n	800187c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	08da      	lsrs	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3208      	adds	r2, #8
 800183c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	220f      	movs	r2, #15
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	08da      	lsrs	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3208      	adds	r2, #8
 8001876:	69b9      	ldr	r1, [r7, #24]
 8001878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	2203      	movs	r2, #3
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0203 	and.w	r2, r3, #3
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80a2 	beq.w	8001a02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <HAL_GPIO_Init+0x2e8>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	4a56      	ldr	r2, [pc, #344]	; (8001a20 <HAL_GPIO_Init+0x2e8>)
 80018c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018cc:	6453      	str	r3, [r2, #68]	; 0x44
 80018ce:	4b54      	ldr	r3, [pc, #336]	; (8001a20 <HAL_GPIO_Init+0x2e8>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018da:	4a52      	ldr	r2, [pc, #328]	; (8001a24 <HAL_GPIO_Init+0x2ec>)
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	3302      	adds	r3, #2
 80018e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	220f      	movs	r2, #15
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a49      	ldr	r2, [pc, #292]	; (8001a28 <HAL_GPIO_Init+0x2f0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d019      	beq.n	800193a <HAL_GPIO_Init+0x202>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a48      	ldr	r2, [pc, #288]	; (8001a2c <HAL_GPIO_Init+0x2f4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0x1fe>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a47      	ldr	r2, [pc, #284]	; (8001a30 <HAL_GPIO_Init+0x2f8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00d      	beq.n	8001932 <HAL_GPIO_Init+0x1fa>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a46      	ldr	r2, [pc, #280]	; (8001a34 <HAL_GPIO_Init+0x2fc>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0x1f6>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a45      	ldr	r2, [pc, #276]	; (8001a38 <HAL_GPIO_Init+0x300>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_GPIO_Init+0x1f2>
 8001926:	2304      	movs	r3, #4
 8001928:	e008      	b.n	800193c <HAL_GPIO_Init+0x204>
 800192a:	2307      	movs	r3, #7
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x204>
 800192e:	2303      	movs	r3, #3
 8001930:	e004      	b.n	800193c <HAL_GPIO_Init+0x204>
 8001932:	2302      	movs	r3, #2
 8001934:	e002      	b.n	800193c <HAL_GPIO_Init+0x204>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x204>
 800193a:	2300      	movs	r3, #0
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	f002 0203 	and.w	r2, r2, #3
 8001942:	0092      	lsls	r2, r2, #2
 8001944:	4093      	lsls	r3, r2
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800194c:	4935      	ldr	r1, [pc, #212]	; (8001a24 <HAL_GPIO_Init+0x2ec>)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <HAL_GPIO_Init+0x304>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197e:	4a2f      	ldr	r2, [pc, #188]	; (8001a3c <HAL_GPIO_Init+0x304>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <HAL_GPIO_Init+0x304>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a8:	4a24      	ldr	r2, [pc, #144]	; (8001a3c <HAL_GPIO_Init+0x304>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ae:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <HAL_GPIO_Init+0x304>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d2:	4a1a      	ldr	r2, [pc, #104]	; (8001a3c <HAL_GPIO_Init+0x304>)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_GPIO_Init+0x304>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019fc:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <HAL_GPIO_Init+0x304>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3301      	adds	r3, #1
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	2b0f      	cmp	r3, #15
 8001a0c:	f67f aea2 	bls.w	8001754 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40013800 	.word	0x40013800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40020800 	.word	0x40020800
 8001a34:	40020c00 	.word	0x40020c00
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40013c00 	.word	0x40013c00

08001a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a50:	787b      	ldrb	r3, [r7, #1]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a5c:	e003      	b.n	8001a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	041a      	lsls	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	619a      	str	r2, [r3, #24]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e12b      	b.n	8001cde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d106      	bne.n	8001aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff f95c 	bl	8000d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2224      	movs	r2, #36	; 0x24
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ac6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ad8:	f001 fb92 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 8001adc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4a81      	ldr	r2, [pc, #516]	; (8001ce8 <HAL_I2C_Init+0x274>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d807      	bhi.n	8001af8 <HAL_I2C_Init+0x84>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4a80      	ldr	r2, [pc, #512]	; (8001cec <HAL_I2C_Init+0x278>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	bf94      	ite	ls
 8001af0:	2301      	movls	r3, #1
 8001af2:	2300      	movhi	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	e006      	b.n	8001b06 <HAL_I2C_Init+0x92>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4a7d      	ldr	r2, [pc, #500]	; (8001cf0 <HAL_I2C_Init+0x27c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	bf94      	ite	ls
 8001b00:	2301      	movls	r3, #1
 8001b02:	2300      	movhi	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0e7      	b.n	8001cde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4a78      	ldr	r2, [pc, #480]	; (8001cf4 <HAL_I2C_Init+0x280>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0c9b      	lsrs	r3, r3, #18
 8001b18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a6a      	ldr	r2, [pc, #424]	; (8001ce8 <HAL_I2C_Init+0x274>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d802      	bhi.n	8001b48 <HAL_I2C_Init+0xd4>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	3301      	adds	r3, #1
 8001b46:	e009      	b.n	8001b5c <HAL_I2C_Init+0xe8>
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b4e:	fb02 f303 	mul.w	r3, r2, r3
 8001b52:	4a69      	ldr	r2, [pc, #420]	; (8001cf8 <HAL_I2C_Init+0x284>)
 8001b54:	fba2 2303 	umull	r2, r3, r2, r3
 8001b58:	099b      	lsrs	r3, r3, #6
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	430b      	orrs	r3, r1
 8001b62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	495c      	ldr	r1, [pc, #368]	; (8001ce8 <HAL_I2C_Init+0x274>)
 8001b78:	428b      	cmp	r3, r1
 8001b7a:	d819      	bhi.n	8001bb0 <HAL_I2C_Init+0x13c>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1e59      	subs	r1, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b8a:	1c59      	adds	r1, r3, #1
 8001b8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b90:	400b      	ands	r3, r1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00a      	beq.n	8001bac <HAL_I2C_Init+0x138>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1e59      	subs	r1, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001baa:	e051      	b.n	8001c50 <HAL_I2C_Init+0x1dc>
 8001bac:	2304      	movs	r3, #4
 8001bae:	e04f      	b.n	8001c50 <HAL_I2C_Init+0x1dc>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d111      	bne.n	8001bdc <HAL_I2C_Init+0x168>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1e58      	subs	r0, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	440b      	add	r3, r1
 8001bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	e012      	b.n	8001c02 <HAL_I2C_Init+0x18e>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1e58      	subs	r0, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	0099      	lsls	r1, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_I2C_Init+0x196>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e022      	b.n	8001c50 <HAL_I2C_Init+0x1dc>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10e      	bne.n	8001c30 <HAL_I2C_Init+0x1bc>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1e58      	subs	r0, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6859      	ldr	r1, [r3, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	440b      	add	r3, r1
 8001c20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2e:	e00f      	b.n	8001c50 <HAL_I2C_Init+0x1dc>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1e58      	subs	r0, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	0099      	lsls	r1, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c46:	3301      	adds	r3, #1
 8001c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	6809      	ldr	r1, [r1, #0]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69da      	ldr	r2, [r3, #28]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6911      	ldr	r1, [r2, #16]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68d2      	ldr	r2, [r2, #12]
 8001c8a:	4311      	orrs	r1, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	430b      	orrs	r3, r1
 8001c92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	000186a0 	.word	0x000186a0
 8001cec:	001e847f 	.word	0x001e847f
 8001cf0:	003d08ff 	.word	0x003d08ff
 8001cf4:	431bde83 	.word	0x431bde83
 8001cf8:	10624dd3 	.word	0x10624dd3

08001cfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	461a      	mov	r2, r3
 8001d08:	460b      	mov	r3, r1
 8001d0a:	817b      	strh	r3, [r7, #10]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff f9ae 	bl	8001070 <HAL_GetTick>
 8001d14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b20      	cmp	r3, #32
 8001d20:	f040 80e0 	bne.w	8001ee4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2319      	movs	r3, #25
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4970      	ldr	r1, [pc, #448]	; (8001ef0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fc58 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e0d3      	b.n	8001ee6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_I2C_Master_Transmit+0x50>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e0cc      	b.n	8001ee6 <HAL_I2C_Master_Transmit+0x1ea>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d007      	beq.n	8001d72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2221      	movs	r2, #33	; 0x21
 8001d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2210      	movs	r2, #16
 8001d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	893a      	ldrh	r2, [r7, #8]
 8001da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4a50      	ldr	r2, [pc, #320]	; (8001ef4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001db2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001db4:	8979      	ldrh	r1, [r7, #10]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	6a3a      	ldr	r2, [r7, #32]
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 fac2 	bl	8002344 <I2C_MasterRequestWrite>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e08d      	b.n	8001ee6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001de0:	e066      	b.n	8001eb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	6a39      	ldr	r1, [r7, #32]
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 fcd2 	bl	8002790 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00d      	beq.n	8001e0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d107      	bne.n	8001e0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e06b      	b.n	8001ee6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	781a      	ldrb	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d11b      	bne.n	8001e84 <HAL_I2C_Master_Transmit+0x188>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d017      	beq.n	8001e84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	6a39      	ldr	r1, [r7, #32]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 fcc2 	bl	8002812 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00d      	beq.n	8001eb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d107      	bne.n	8001eac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eaa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e01a      	b.n	8001ee6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d194      	bne.n	8001de2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e000      	b.n	8001ee6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ee4:	2302      	movs	r3, #2
  }
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	00100002 	.word	0x00100002
 8001ef4:	ffff0000 	.word	0xffff0000

08001ef8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08c      	sub	sp, #48	; 0x30
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	461a      	mov	r2, r3
 8001f04:	460b      	mov	r3, r1
 8001f06:	817b      	strh	r3, [r7, #10]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f0c:	f7ff f8b0 	bl	8001070 <HAL_GetTick>
 8001f10:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	f040 820b 	bne.w	8002336 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2319      	movs	r3, #25
 8001f26:	2201      	movs	r2, #1
 8001f28:	497c      	ldr	r1, [pc, #496]	; (800211c <HAL_I2C_Master_Receive+0x224>)
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 fb5a 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
 8001f38:	e1fe      	b.n	8002338 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_I2C_Master_Receive+0x50>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e1f7      	b.n	8002338 <HAL_I2C_Master_Receive+0x440>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d007      	beq.n	8001f6e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0201 	orr.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2222      	movs	r2, #34	; 0x22
 8001f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2210      	movs	r2, #16
 8001f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	893a      	ldrh	r2, [r7, #8]
 8001f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4a5c      	ldr	r2, [pc, #368]	; (8002120 <HAL_I2C_Master_Receive+0x228>)
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fb0:	8979      	ldrh	r1, [r7, #10]
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 fa46 	bl	8002448 <I2C_MasterRequestRead>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e1b8      	b.n	8002338 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d113      	bne.n	8001ff6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	623b      	str	r3, [r7, #32]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	623b      	str	r3, [r7, #32]
 8001fe2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	e18c      	b.n	8002310 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d11b      	bne.n	8002036 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800200c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e16c      	b.n	8002310 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203a:	2b02      	cmp	r3, #2
 800203c:	d11b      	bne.n	8002076 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800205c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	e14c      	b.n	8002310 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002084:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800209c:	e138      	b.n	8002310 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	f200 80f1 	bhi.w	800228a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d123      	bne.n	80020f8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 fbed 	bl	8002894 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e139      	b.n	8002338 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020f6:	e10b      	b.n	8002310 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d14e      	bne.n	800219e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002106:	2200      	movs	r2, #0
 8002108:	4906      	ldr	r1, [pc, #24]	; (8002124 <HAL_I2C_Master_Receive+0x22c>)
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fa6a 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e10e      	b.n	8002338 <HAL_I2C_Master_Receive+0x440>
 800211a:	bf00      	nop
 800211c:	00100002 	.word	0x00100002
 8002120:	ffff0000 	.word	0xffff0000
 8002124:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002136:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	3b01      	subs	r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800219c:	e0b8      	b.n	8002310 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	2200      	movs	r2, #0
 80021a6:	4966      	ldr	r1, [pc, #408]	; (8002340 <HAL_I2C_Master_Receive+0x448>)
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fa1b 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0bf      	b.n	8002338 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002200:	2200      	movs	r2, #0
 8002202:	494f      	ldr	r1, [pc, #316]	; (8002340 <HAL_I2C_Master_Receive+0x448>)
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f9ed 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e091      	b.n	8002338 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002288:	e042      	b.n	8002310 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800228a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fb00 	bl	8002894 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e04c      	b.n	8002338 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d118      	bne.n	8002310 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002314:	2b00      	cmp	r3, #0
 8002316:	f47f aec2 	bne.w	800209e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002336:	2302      	movs	r3, #2
  }
}
 8002338:	4618      	mov	r0, r3
 800233a:	3728      	adds	r7, #40	; 0x28
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	00010004 	.word	0x00010004

08002344 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	460b      	mov	r3, r1
 8002352:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b08      	cmp	r3, #8
 800235e:	d006      	beq.n	800236e <I2C_MasterRequestWrite+0x2a>
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d003      	beq.n	800236e <I2C_MasterRequestWrite+0x2a>
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800236c:	d108      	bne.n	8002380 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e00b      	b.n	8002398 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	2b12      	cmp	r3, #18
 8002386:	d107      	bne.n	8002398 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002396:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f91d 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00d      	beq.n	80023cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023be:	d103      	bne.n	80023c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e035      	b.n	8002438 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023d4:	d108      	bne.n	80023e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023d6:	897b      	ldrh	r3, [r7, #10]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023e4:	611a      	str	r2, [r3, #16]
 80023e6:	e01b      	b.n	8002420 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023e8:	897b      	ldrh	r3, [r7, #10]
 80023ea:	11db      	asrs	r3, r3, #7
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f003 0306 	and.w	r3, r3, #6
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f063 030f 	orn	r3, r3, #15
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	490e      	ldr	r1, [pc, #56]	; (8002440 <I2C_MasterRequestWrite+0xfc>)
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f943 	bl	8002692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e010      	b.n	8002438 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002416:	897b      	ldrh	r3, [r7, #10]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4907      	ldr	r1, [pc, #28]	; (8002444 <I2C_MasterRequestWrite+0x100>)
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f933 	bl	8002692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	00010008 	.word	0x00010008
 8002444:	00010002 	.word	0x00010002

08002448 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	460b      	mov	r3, r1
 8002456:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800246c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b08      	cmp	r3, #8
 8002472:	d006      	beq.n	8002482 <I2C_MasterRequestRead+0x3a>
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d003      	beq.n	8002482 <I2C_MasterRequestRead+0x3a>
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002480:	d108      	bne.n	8002494 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e00b      	b.n	80024ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	2b11      	cmp	r3, #17
 800249a:	d107      	bne.n	80024ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f893 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00d      	beq.n	80024e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d2:	d103      	bne.n	80024dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e079      	b.n	80025d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024e8:	d108      	bne.n	80024fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024ea:	897b      	ldrh	r3, [r7, #10]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	611a      	str	r2, [r3, #16]
 80024fa:	e05f      	b.n	80025bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024fc:	897b      	ldrh	r3, [r7, #10]
 80024fe:	11db      	asrs	r3, r3, #7
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f003 0306 	and.w	r3, r3, #6
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f063 030f 	orn	r3, r3, #15
 800250c:	b2da      	uxtb	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4930      	ldr	r1, [pc, #192]	; (80025dc <I2C_MasterRequestRead+0x194>)
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f8b9 	bl	8002692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e054      	b.n	80025d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800252a:	897b      	ldrh	r3, [r7, #10]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4929      	ldr	r1, [pc, #164]	; (80025e0 <I2C_MasterRequestRead+0x198>)
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f8a9 	bl	8002692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e044      	b.n	80025d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800256e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f831 	bl	80025e4 <I2C_WaitOnFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00d      	beq.n	80025a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002596:	d103      	bne.n	80025a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800259e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e017      	b.n	80025d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80025a4:	897b      	ldrh	r3, [r7, #10]
 80025a6:	11db      	asrs	r3, r3, #7
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f003 0306 	and.w	r3, r3, #6
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f063 030e 	orn	r3, r3, #14
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	4907      	ldr	r1, [pc, #28]	; (80025e0 <I2C_MasterRequestRead+0x198>)
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f865 	bl	8002692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	00010008 	.word	0x00010008
 80025e0:	00010002 	.word	0x00010002

080025e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f4:	e025      	b.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d021      	beq.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fe:	f7fe fd37 	bl	8001070 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d302      	bcc.n	8002614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d116      	bne.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f043 0220 	orr.w	r2, r3, #32
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e023      	b.n	800268a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	0c1b      	lsrs	r3, r3, #16
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d10d      	bne.n	8002668 <I2C_WaitOnFlagUntilTimeout+0x84>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4013      	ands	r3, r2
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf0c      	ite	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	2300      	movne	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	e00c      	b.n	8002682 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4013      	ands	r3, r2
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf0c      	ite	eq
 800267a:	2301      	moveq	r3, #1
 800267c:	2300      	movne	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	429a      	cmp	r2, r3
 8002686:	d0b6      	beq.n	80025f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026a0:	e051      	b.n	8002746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b0:	d123      	bne.n	80026fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f043 0204 	orr.w	r2, r3, #4
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e046      	b.n	8002788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d021      	beq.n	8002746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002702:	f7fe fcb5 	bl	8001070 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	429a      	cmp	r2, r3
 8002710:	d302      	bcc.n	8002718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d116      	bne.n	8002746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f043 0220 	orr.w	r2, r3, #32
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e020      	b.n	8002788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d10c      	bne.n	800276a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	43da      	mvns	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4013      	ands	r3, r2
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	bf14      	ite	ne
 8002762:	2301      	movne	r3, #1
 8002764:	2300      	moveq	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	e00b      	b.n	8002782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	43da      	mvns	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	4013      	ands	r3, r2
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf14      	ite	ne
 800277c:	2301      	movne	r3, #1
 800277e:	2300      	moveq	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d18d      	bne.n	80026a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800279c:	e02d      	b.n	80027fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f8ce 	bl	8002940 <I2C_IsAcknowledgeFailed>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e02d      	b.n	800280a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b4:	d021      	beq.n	80027fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b6:	f7fe fc5b 	bl	8001070 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d302      	bcc.n	80027cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d116      	bne.n	80027fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f043 0220 	orr.w	r2, r3, #32
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e007      	b.n	800280a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002804:	2b80      	cmp	r3, #128	; 0x80
 8002806:	d1ca      	bne.n	800279e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800281e:	e02d      	b.n	800287c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f88d 	bl	8002940 <I2C_IsAcknowledgeFailed>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e02d      	b.n	800288c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d021      	beq.n	800287c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002838:	f7fe fc1a 	bl	8001070 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	429a      	cmp	r2, r3
 8002846:	d302      	bcc.n	800284e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d116      	bne.n	800287c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f043 0220 	orr.w	r2, r3, #32
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e007      	b.n	800288c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	2b04      	cmp	r3, #4
 8002888:	d1ca      	bne.n	8002820 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028a0:	e042      	b.n	8002928 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d119      	bne.n	80028e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0210 	mvn.w	r2, #16
 80028b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e029      	b.n	8002938 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e4:	f7fe fbc4 	bl	8001070 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d302      	bcc.n	80028fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d116      	bne.n	8002928 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e007      	b.n	8002938 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002932:	2b40      	cmp	r3, #64	; 0x40
 8002934:	d1b5      	bne.n	80028a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002956:	d11b      	bne.n	8002990 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002960:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	f043 0204 	orr.w	r2, r3, #4
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e267      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d075      	beq.n	8002aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029be:	4b88      	ldr	r3, [pc, #544]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d00c      	beq.n	80029e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ca:	4b85      	ldr	r3, [pc, #532]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d112      	bne.n	80029fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d6:	4b82      	ldr	r3, [pc, #520]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e2:	d10b      	bne.n	80029fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	4b7e      	ldr	r3, [pc, #504]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d05b      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x108>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d157      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e242      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a04:	d106      	bne.n	8002a14 <HAL_RCC_OscConfig+0x74>
 8002a06:	4b76      	ldr	r3, [pc, #472]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a75      	ldr	r2, [pc, #468]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e01d      	b.n	8002a50 <HAL_RCC_OscConfig+0xb0>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x98>
 8002a1e:	4b70      	ldr	r3, [pc, #448]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a6f      	ldr	r2, [pc, #444]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b6d      	ldr	r3, [pc, #436]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a6c      	ldr	r2, [pc, #432]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0xb0>
 8002a38:	4b69      	ldr	r3, [pc, #420]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a68      	ldr	r2, [pc, #416]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b66      	ldr	r3, [pc, #408]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a65      	ldr	r2, [pc, #404]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d013      	beq.n	8002a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe fb0a 	bl	8001070 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a60:	f7fe fb06 	bl	8001070 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e207      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	4b5b      	ldr	r3, [pc, #364]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0xc0>
 8002a7e:	e014      	b.n	8002aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7fe faf6 	bl	8001070 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a88:	f7fe faf2 	bl	8001070 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e1f3      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9a:	4b51      	ldr	r3, [pc, #324]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0xe8>
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d063      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ab6:	4b4a      	ldr	r3, [pc, #296]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac2:	4b47      	ldr	r3, [pc, #284]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d11c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ace:	4b44      	ldr	r3, [pc, #272]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d116      	bne.n	8002b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	4b41      	ldr	r3, [pc, #260]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <HAL_RCC_OscConfig+0x152>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d001      	beq.n	8002af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e1c7      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af2:	4b3b      	ldr	r3, [pc, #236]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4937      	ldr	r1, [pc, #220]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	e03a      	b.n	8002b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b10:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <HAL_RCC_OscConfig+0x244>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe faab 	bl	8001070 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b1e:	f7fe faa7 	bl	8001070 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e1a8      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b30:	4b2b      	ldr	r3, [pc, #172]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3c:	4b28      	ldr	r3, [pc, #160]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4925      	ldr	r1, [pc, #148]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]
 8002b50:	e015      	b.n	8002b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b52:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <HAL_RCC_OscConfig+0x244>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fa8a 	bl	8001070 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b60:	f7fe fa86 	bl	8001070 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e187      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b72:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d036      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d016      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b92:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <HAL_RCC_OscConfig+0x248>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7fe fa6a 	bl	8001070 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7fe fa66 	bl	8001070 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e167      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x200>
 8002bbe:	e01b      	b.n	8002bf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_OscConfig+0x248>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fa53 	bl	8001070 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bcc:	e00e      	b.n	8002bec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bce:	f7fe fa4f 	bl	8001070 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d907      	bls.n	8002bec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e150      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
 8002be0:	40023800 	.word	0x40023800
 8002be4:	42470000 	.word	0x42470000
 8002be8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bec:	4b88      	ldr	r3, [pc, #544]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ea      	bne.n	8002bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8097 	beq.w	8002d34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0a:	4b81      	ldr	r3, [pc, #516]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10f      	bne.n	8002c36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	4b7d      	ldr	r3, [pc, #500]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	4a7c      	ldr	r2, [pc, #496]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c24:	6413      	str	r3, [r2, #64]	; 0x40
 8002c26:	4b7a      	ldr	r3, [pc, #488]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c32:	2301      	movs	r3, #1
 8002c34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c36:	4b77      	ldr	r3, [pc, #476]	; (8002e14 <HAL_RCC_OscConfig+0x474>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d118      	bne.n	8002c74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c42:	4b74      	ldr	r3, [pc, #464]	; (8002e14 <HAL_RCC_OscConfig+0x474>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a73      	ldr	r2, [pc, #460]	; (8002e14 <HAL_RCC_OscConfig+0x474>)
 8002c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4e:	f7fe fa0f 	bl	8001070 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c56:	f7fe fa0b 	bl	8001070 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e10c      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c68:	4b6a      	ldr	r3, [pc, #424]	; (8002e14 <HAL_RCC_OscConfig+0x474>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d106      	bne.n	8002c8a <HAL_RCC_OscConfig+0x2ea>
 8002c7c:	4b64      	ldr	r3, [pc, #400]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	4a63      	ldr	r2, [pc, #396]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6713      	str	r3, [r2, #112]	; 0x70
 8002c88:	e01c      	b.n	8002cc4 <HAL_RCC_OscConfig+0x324>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b05      	cmp	r3, #5
 8002c90:	d10c      	bne.n	8002cac <HAL_RCC_OscConfig+0x30c>
 8002c92:	4b5f      	ldr	r3, [pc, #380]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	4a5e      	ldr	r2, [pc, #376]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002c98:	f043 0304 	orr.w	r3, r3, #4
 8002c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9e:	4b5c      	ldr	r3, [pc, #368]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	4a5b      	ldr	r2, [pc, #364]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8002caa:	e00b      	b.n	8002cc4 <HAL_RCC_OscConfig+0x324>
 8002cac:	4b58      	ldr	r3, [pc, #352]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4a57      	ldr	r2, [pc, #348]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	f023 0301 	bic.w	r3, r3, #1
 8002cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb8:	4b55      	ldr	r3, [pc, #340]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	4a54      	ldr	r2, [pc, #336]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	f023 0304 	bic.w	r3, r3, #4
 8002cc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d015      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7fe f9d0 	bl	8001070 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd4:	f7fe f9cc 	bl	8001070 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e0cb      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cea:	4b49      	ldr	r3, [pc, #292]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0ee      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x334>
 8002cf6:	e014      	b.n	8002d22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf8:	f7fe f9ba 	bl	8001070 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f7fe f9b6 	bl	8001070 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e0b5      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d16:	4b3e      	ldr	r3, [pc, #248]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1ee      	bne.n	8002d00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d105      	bne.n	8002d34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d28:	4b39      	ldr	r3, [pc, #228]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	4a38      	ldr	r2, [pc, #224]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80a1 	beq.w	8002e80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d3e:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d05c      	beq.n	8002e04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d141      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <HAL_RCC_OscConfig+0x478>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fe f98a 	bl	8001070 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fe f986 	bl	8001070 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e087      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d72:	4b27      	ldr	r3, [pc, #156]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	019b      	lsls	r3, r3, #6
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	3b01      	subs	r3, #1
 8002d98:	041b      	lsls	r3, r3, #16
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	491b      	ldr	r1, [pc, #108]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_RCC_OscConfig+0x478>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dae:	f7fe f95f 	bl	8001070 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db6:	f7fe f95b 	bl	8001070 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e05c      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x416>
 8002dd4:	e054      	b.n	8002e80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <HAL_RCC_OscConfig+0x478>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fe f948 	bl	8001070 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de4:	f7fe f944 	bl	8001070 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e045      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_RCC_OscConfig+0x470>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x444>
 8002e02:	e03d      	b.n	8002e80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e038      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40007000 	.word	0x40007000
 8002e18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_RCC_OscConfig+0x4ec>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d028      	beq.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d121      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d11a      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d111      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	3b01      	subs	r3, #1
 8002e66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800

08002e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0cc      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b68      	ldr	r3, [pc, #416]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d90c      	bls.n	8002ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b65      	ldr	r3, [pc, #404]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b63      	ldr	r3, [pc, #396]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0b8      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee4:	4b59      	ldr	r3, [pc, #356]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4a58      	ldr	r2, [pc, #352]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002efc:	4b53      	ldr	r3, [pc, #332]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f08:	4b50      	ldr	r3, [pc, #320]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	494d      	ldr	r1, [pc, #308]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d044      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	4b47      	ldr	r3, [pc, #284]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d119      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e07f      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d003      	beq.n	8002f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	4b3f      	ldr	r3, [pc, #252]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e06f      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5e:	4b3b      	ldr	r3, [pc, #236]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e067      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f6e:	4b37      	ldr	r3, [pc, #220]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f023 0203 	bic.w	r2, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4934      	ldr	r1, [pc, #208]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f80:	f7fe f876 	bl	8001070 <HAL_GetTick>
 8002f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f88:	f7fe f872 	bl	8001070 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e04f      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	4b2b      	ldr	r3, [pc, #172]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 020c 	and.w	r2, r3, #12
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d1eb      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b25      	ldr	r3, [pc, #148]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d20c      	bcs.n	8002fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b22      	ldr	r3, [pc, #136]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e032      	b.n	800303e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4916      	ldr	r1, [pc, #88]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	490e      	ldr	r1, [pc, #56]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003016:	f000 f821 	bl	800305c <HAL_RCC_GetSysClockFreq>
 800301a:	4602      	mov	r2, r0
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	490a      	ldr	r1, [pc, #40]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8003028:	5ccb      	ldrb	r3, [r1, r3]
 800302a:	fa22 f303 	lsr.w	r3, r2, r3
 800302e:	4a09      	ldr	r2, [pc, #36]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd ffd6 	bl	8000fe8 <HAL_InitTick>

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023c00 	.word	0x40023c00
 800304c:	40023800 	.word	0x40023800
 8003050:	080048ac 	.word	0x080048ac
 8003054:	20000000 	.word	0x20000000
 8003058:	20000004 	.word	0x20000004

0800305c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800305c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003060:	b090      	sub	sp, #64	; 0x40
 8003062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	637b      	str	r3, [r7, #52]	; 0x34
 8003068:	2300      	movs	r3, #0
 800306a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306c:	2300      	movs	r3, #0
 800306e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003074:	4b59      	ldr	r3, [pc, #356]	; (80031dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b08      	cmp	r3, #8
 800307e:	d00d      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x40>
 8003080:	2b08      	cmp	r3, #8
 8003082:	f200 80a1 	bhi.w	80031c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x34>
 800308a:	2b04      	cmp	r3, #4
 800308c:	d003      	beq.n	8003096 <HAL_RCC_GetSysClockFreq+0x3a>
 800308e:	e09b      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003090:	4b53      	ldr	r3, [pc, #332]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003092:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003094:	e09b      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003096:	4b53      	ldr	r3, [pc, #332]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003098:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800309a:	e098      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800309c:	4b4f      	ldr	r3, [pc, #316]	; (80031dc <HAL_RCC_GetSysClockFreq+0x180>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030a6:	4b4d      	ldr	r3, [pc, #308]	; (80031dc <HAL_RCC_GetSysClockFreq+0x180>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d028      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b2:	4b4a      	ldr	r3, [pc, #296]	; (80031dc <HAL_RCC_GetSysClockFreq+0x180>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	099b      	lsrs	r3, r3, #6
 80030b8:	2200      	movs	r2, #0
 80030ba:	623b      	str	r3, [r7, #32]
 80030bc:	627a      	str	r2, [r7, #36]	; 0x24
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030c4:	2100      	movs	r1, #0
 80030c6:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80030c8:	fb03 f201 	mul.w	r2, r3, r1
 80030cc:	2300      	movs	r3, #0
 80030ce:	fb00 f303 	mul.w	r3, r0, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	4a43      	ldr	r2, [pc, #268]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80030d6:	fba0 1202 	umull	r1, r2, r0, r2
 80030da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030dc:	460a      	mov	r2, r1
 80030de:	62ba      	str	r2, [r7, #40]	; 0x28
 80030e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e2:	4413      	add	r3, r2
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e8:	2200      	movs	r2, #0
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	61fa      	str	r2, [r7, #28]
 80030ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030f6:	f7fd f873 	bl	80001e0 <__aeabi_uldivmod>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4613      	mov	r3, r2
 8003100:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003102:	e053      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003104:	4b35      	ldr	r3, [pc, #212]	; (80031dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	099b      	lsrs	r3, r3, #6
 800310a:	2200      	movs	r2, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	617a      	str	r2, [r7, #20]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003116:	f04f 0b00 	mov.w	fp, #0
 800311a:	4652      	mov	r2, sl
 800311c:	465b      	mov	r3, fp
 800311e:	f04f 0000 	mov.w	r0, #0
 8003122:	f04f 0100 	mov.w	r1, #0
 8003126:	0159      	lsls	r1, r3, #5
 8003128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800312c:	0150      	lsls	r0, r2, #5
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	ebb2 080a 	subs.w	r8, r2, sl
 8003136:	eb63 090b 	sbc.w	r9, r3, fp
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003146:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800314a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800314e:	ebb2 0408 	subs.w	r4, r2, r8
 8003152:	eb63 0509 	sbc.w	r5, r3, r9
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	00eb      	lsls	r3, r5, #3
 8003160:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003164:	00e2      	lsls	r2, r4, #3
 8003166:	4614      	mov	r4, r2
 8003168:	461d      	mov	r5, r3
 800316a:	eb14 030a 	adds.w	r3, r4, sl
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	eb45 030b 	adc.w	r3, r5, fp
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003182:	4629      	mov	r1, r5
 8003184:	028b      	lsls	r3, r1, #10
 8003186:	4621      	mov	r1, r4
 8003188:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800318c:	4621      	mov	r1, r4
 800318e:	028a      	lsls	r2, r1, #10
 8003190:	4610      	mov	r0, r2
 8003192:	4619      	mov	r1, r3
 8003194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003196:	2200      	movs	r2, #0
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	60fa      	str	r2, [r7, #12]
 800319c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031a0:	f7fd f81e 	bl	80001e0 <__aeabi_uldivmod>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4613      	mov	r3, r2
 80031aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_GetSysClockFreq+0x180>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	3301      	adds	r3, #1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80031bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031c6:	e002      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80031ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3740      	adds	r7, #64	; 0x40
 80031d4:	46bd      	mov	sp, r7
 80031d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	00f42400 	.word	0x00f42400
 80031e4:	017d7840 	.word	0x017d7840

080031e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000000 	.word	0x20000000

08003200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003204:	f7ff fff0 	bl	80031e8 <HAL_RCC_GetHCLKFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	0a9b      	lsrs	r3, r3, #10
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4903      	ldr	r1, [pc, #12]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	080048bc 	.word	0x080048bc

08003228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e07b      	b.n	8003332 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	2b00      	cmp	r3, #0
 8003240:	d108      	bne.n	8003254 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800324a:	d009      	beq.n	8003260 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	61da      	str	r2, [r3, #28]
 8003252:	e005      	b.n	8003260 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fd fdb4 	bl	8000de8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003296:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	ea42 0103 	orr.w	r1, r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	f003 0104 	and.w	r1, r3, #4
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	f003 0210 	and.w	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003320:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	4603      	mov	r3, r0
 8003342:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003348:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800334c:	2b84      	cmp	r3, #132	; 0x84
 800334e:	d005      	beq.n	800335c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003350:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	3303      	adds	r3, #3
 800335a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800335c:	68fb      	ldr	r3, [r7, #12]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800336e:	f000 fadf 	bl	8003930 <vTaskStartScheduler>
  
  return osOK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}

08003378 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af04      	add	r7, sp, #16
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d020      	beq.n	80033cc <osThreadCreate+0x54>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01c      	beq.n	80033cc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685c      	ldr	r4, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681d      	ldr	r5, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691e      	ldr	r6, [r3, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ffc8 	bl	800333a <makeFreeRtosPriority>
 80033aa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033b4:	9202      	str	r2, [sp, #8]
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	9100      	str	r1, [sp, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	4632      	mov	r2, r6
 80033be:	4629      	mov	r1, r5
 80033c0:	4620      	mov	r0, r4
 80033c2:	f000 f8ed 	bl	80035a0 <xTaskCreateStatic>
 80033c6:	4603      	mov	r3, r0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	e01c      	b.n	8003406 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685c      	ldr	r4, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033d8:	b29e      	uxth	r6, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ffaa 	bl	800333a <makeFreeRtosPriority>
 80033e6:	4602      	mov	r2, r0
 80033e8:	f107 030c 	add.w	r3, r7, #12
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	9200      	str	r2, [sp, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	4632      	mov	r2, r6
 80033f4:	4629      	mov	r1, r5
 80033f6:	4620      	mov	r0, r4
 80033f8:	f000 f92f 	bl	800365a <xTaskCreate>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d001      	beq.n	8003406 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003402:	2300      	movs	r3, #0
 8003404:	e000      	b.n	8003408 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003406:	68fb      	ldr	r3, [r7, #12]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003410 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <osDelay+0x16>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	e000      	b.n	8003428 <osDelay+0x18>
 8003426:	2301      	movs	r3, #1
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fa4d 	bl	80038c8 <vTaskDelay>
  
  return osOK;
 800342e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f103 0208 	add.w	r2, r3, #8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f04f 32ff 	mov.w	r2, #4294967295
 8003450:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f103 0208 	add.w	r2, r3, #8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f103 0208 	add.w	r2, r3, #8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003492:	b480      	push	{r7}
 8003494:	b085      	sub	sp, #20
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	601a      	str	r2, [r3, #0]
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f0:	d103      	bne.n	80034fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	e00c      	b.n	8003514 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3308      	adds	r3, #8
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	e002      	b.n	8003508 <vListInsert+0x2e>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	429a      	cmp	r2, r3
 8003512:	d2f6      	bcs.n	8003502 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	601a      	str	r2, [r3, #0]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6892      	ldr	r2, [r2, #8]
 8003562:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6852      	ldr	r2, [r2, #4]
 800356c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	429a      	cmp	r2, r3
 8003576:	d103      	bne.n	8003580 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1e5a      	subs	r2, r3, #1
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08e      	sub	sp, #56	; 0x38
 80035a4:	af04      	add	r7, sp, #16
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	61fb      	str	r3, [r7, #28]
}
 80035e2:	bf00      	nop
 80035e4:	e7fe      	b.n	80035e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035e6:	2354      	movs	r3, #84	; 0x54
 80035e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b54      	cmp	r3, #84	; 0x54
 80035ee:	d00a      	beq.n	8003606 <xTaskCreateStatic+0x66>
	__asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	61bb      	str	r3, [r7, #24]
}
 8003602:	bf00      	nop
 8003604:	e7fe      	b.n	8003604 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003606:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	2b00      	cmp	r3, #0
 800360c:	d01e      	beq.n	800364c <xTaskCreateStatic+0xac>
 800360e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01b      	beq.n	800364c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800361c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	2202      	movs	r2, #2
 8003622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003626:	2300      	movs	r3, #0
 8003628:	9303      	str	r3, [sp, #12]
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	9302      	str	r3, [sp, #8]
 800362e:	f107 0314 	add.w	r3, r7, #20
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f850 	bl	80036e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003646:	f000 f8d5 	bl	80037f4 <prvAddNewTaskToReadyList>
 800364a:	e001      	b.n	8003650 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003650:	697b      	ldr	r3, [r7, #20]
	}
 8003652:	4618      	mov	r0, r3
 8003654:	3728      	adds	r7, #40	; 0x28
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800365a:	b580      	push	{r7, lr}
 800365c:	b08c      	sub	sp, #48	; 0x30
 800365e:	af04      	add	r7, sp, #16
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	603b      	str	r3, [r7, #0]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fee2 	bl	8004438 <pvPortMalloc>
 8003674:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00e      	beq.n	800369a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800367c:	2054      	movs	r0, #84	; 0x54
 800367e:	f000 fedb 	bl	8004438 <pvPortMalloc>
 8003682:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	631a      	str	r2, [r3, #48]	; 0x30
 8003690:	e005      	b.n	800369e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003692:	6978      	ldr	r0, [r7, #20]
 8003694:	f000 ff9c 	bl	80045d0 <vPortFree>
 8003698:	e001      	b.n	800369e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d017      	beq.n	80036d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036ac:	88fa      	ldrh	r2, [r7, #6]
 80036ae:	2300      	movs	r3, #0
 80036b0:	9303      	str	r3, [sp, #12]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	9302      	str	r3, [sp, #8]
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f80e 	bl	80036e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036c8:	69f8      	ldr	r0, [r7, #28]
 80036ca:	f000 f893 	bl	80037f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036ce:	2301      	movs	r3, #1
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	e002      	b.n	80036da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036d4:	f04f 33ff 	mov.w	r3, #4294967295
 80036d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036da:	69bb      	ldr	r3, [r7, #24]
	}
 80036dc:	4618      	mov	r0, r3
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036fc:	3b01      	subs	r3, #1
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f023 0307 	bic.w	r3, r3, #7
 800370a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	617b      	str	r3, [r7, #20]
}
 8003728:	bf00      	nop
 800372a:	e7fe      	b.n	800372a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01f      	beq.n	8003772 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	e012      	b.n	800375e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	4413      	add	r3, r2
 800373e:	7819      	ldrb	r1, [r3, #0]
 8003740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	4413      	add	r3, r2
 8003746:	3334      	adds	r3, #52	; 0x34
 8003748:	460a      	mov	r2, r1
 800374a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d006      	beq.n	8003766 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	3301      	adds	r3, #1
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	2b0f      	cmp	r3, #15
 8003762:	d9e9      	bls.n	8003738 <prvInitialiseNewTask+0x54>
 8003764:	e000      	b.n	8003768 <prvInitialiseNewTask+0x84>
			{
				break;
 8003766:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003770:	e003      	b.n	800377a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	2b06      	cmp	r3, #6
 800377e:	d901      	bls.n	8003784 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003780:	2306      	movs	r3, #6
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003788:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800378e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	2200      	movs	r2, #0
 8003794:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	3304      	adds	r3, #4
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff fe6c 	bl	8003478 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	3318      	adds	r3, #24
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fe67 	bl	8003478 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	f1c3 0207 	rsb	r2, r3, #7
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	2200      	movs	r2, #0
 80037c4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	68f9      	ldr	r1, [r7, #12]
 80037d2:	69b8      	ldr	r0, [r7, #24]
 80037d4:	f000 fc24 	bl	8004020 <pxPortInitialiseStack>
 80037d8:	4602      	mov	r2, r0
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80037de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037ea:	bf00      	nop
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037fc:	f000 fd3a 	bl	8004274 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003800:	4b2a      	ldr	r3, [pc, #168]	; (80038ac <prvAddNewTaskToReadyList+0xb8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3301      	adds	r3, #1
 8003806:	4a29      	ldr	r2, [pc, #164]	; (80038ac <prvAddNewTaskToReadyList+0xb8>)
 8003808:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800380a:	4b29      	ldr	r3, [pc, #164]	; (80038b0 <prvAddNewTaskToReadyList+0xbc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003812:	4a27      	ldr	r2, [pc, #156]	; (80038b0 <prvAddNewTaskToReadyList+0xbc>)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003818:	4b24      	ldr	r3, [pc, #144]	; (80038ac <prvAddNewTaskToReadyList+0xb8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d110      	bne.n	8003842 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003820:	f000 fabc 	bl	8003d9c <prvInitialiseTaskLists>
 8003824:	e00d      	b.n	8003842 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003826:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <prvAddNewTaskToReadyList+0xc0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <prvAddNewTaskToReadyList+0xbc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	429a      	cmp	r2, r3
 800383a:	d802      	bhi.n	8003842 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800383c:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <prvAddNewTaskToReadyList+0xbc>)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003842:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <prvAddNewTaskToReadyList+0xc4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	4a1b      	ldr	r2, [pc, #108]	; (80038b8 <prvAddNewTaskToReadyList+0xc4>)
 800384a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	2201      	movs	r2, #1
 8003852:	409a      	lsls	r2, r3
 8003854:	4b19      	ldr	r3, [pc, #100]	; (80038bc <prvAddNewTaskToReadyList+0xc8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4313      	orrs	r3, r2
 800385a:	4a18      	ldr	r2, [pc, #96]	; (80038bc <prvAddNewTaskToReadyList+0xc8>)
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4a15      	ldr	r2, [pc, #84]	; (80038c0 <prvAddNewTaskToReadyList+0xcc>)
 800386c:	441a      	add	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3304      	adds	r3, #4
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f7ff fe0c 	bl	8003492 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800387a:	f000 fd2b 	bl	80042d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <prvAddNewTaskToReadyList+0xc0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00e      	beq.n	80038a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003886:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <prvAddNewTaskToReadyList+0xbc>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	429a      	cmp	r2, r3
 8003892:	d207      	bcs.n	80038a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <prvAddNewTaskToReadyList+0xd0>)
 8003896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	200004d8 	.word	0x200004d8
 80038b0:	200003d8 	.word	0x200003d8
 80038b4:	200004e4 	.word	0x200004e4
 80038b8:	200004f4 	.word	0x200004f4
 80038bc:	200004e0 	.word	0x200004e0
 80038c0:	200003dc 	.word	0x200003dc
 80038c4:	e000ed04 	.word	0xe000ed04

080038c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d017      	beq.n	800390a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038da:	4b13      	ldr	r3, [pc, #76]	; (8003928 <vTaskDelay+0x60>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <vTaskDelay+0x30>
	__asm volatile
 80038e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e6:	f383 8811 	msr	BASEPRI, r3
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	60bb      	str	r3, [r7, #8]
}
 80038f4:	bf00      	nop
 80038f6:	e7fe      	b.n	80038f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038f8:	f000 f87a 	bl	80039f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038fc:	2100      	movs	r1, #0
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fb28 	bl	8003f54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003904:	f000 f882 	bl	8003a0c <xTaskResumeAll>
 8003908:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d107      	bne.n	8003920 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <vTaskDelay+0x64>)
 8003912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000500 	.word	0x20000500
 800392c:	e000ed04 	.word	0xe000ed04

08003930 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08a      	sub	sp, #40	; 0x28
 8003934:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800393a:	2300      	movs	r3, #0
 800393c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800393e:	463a      	mov	r2, r7
 8003940:	1d39      	adds	r1, r7, #4
 8003942:	f107 0308 	add.w	r3, r7, #8
 8003946:	4618      	mov	r0, r3
 8003948:	f7fc fe46 	bl	80005d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800394c:	6839      	ldr	r1, [r7, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	9202      	str	r2, [sp, #8]
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	2300      	movs	r3, #0
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	2300      	movs	r3, #0
 800395c:	460a      	mov	r2, r1
 800395e:	491e      	ldr	r1, [pc, #120]	; (80039d8 <vTaskStartScheduler+0xa8>)
 8003960:	481e      	ldr	r0, [pc, #120]	; (80039dc <vTaskStartScheduler+0xac>)
 8003962:	f7ff fe1d 	bl	80035a0 <xTaskCreateStatic>
 8003966:	4603      	mov	r3, r0
 8003968:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <vTaskStartScheduler+0xb0>)
 800396a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800396c:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <vTaskStartScheduler+0xb0>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003974:	2301      	movs	r3, #1
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e001      	b.n	800397e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d116      	bne.n	80039b2 <vTaskStartScheduler+0x82>
	__asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	613b      	str	r3, [r7, #16]
}
 8003996:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003998:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <vTaskStartScheduler+0xb4>)
 800399a:	f04f 32ff 	mov.w	r2, #4294967295
 800399e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039a0:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <vTaskStartScheduler+0xb8>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <vTaskStartScheduler+0xbc>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039ac:	f000 fbc0 	bl	8004130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039b0:	e00e      	b.n	80039d0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d10a      	bne.n	80039d0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	60fb      	str	r3, [r7, #12]
}
 80039cc:	bf00      	nop
 80039ce:	e7fe      	b.n	80039ce <vTaskStartScheduler+0x9e>
}
 80039d0:	bf00      	nop
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	080048a4 	.word	0x080048a4
 80039dc:	08003d6d 	.word	0x08003d6d
 80039e0:	200004fc 	.word	0x200004fc
 80039e4:	200004f8 	.word	0x200004f8
 80039e8:	200004e4 	.word	0x200004e4
 80039ec:	200004dc 	.word	0x200004dc

080039f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039f4:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <vTaskSuspendAll+0x18>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3301      	adds	r3, #1
 80039fa:	4a03      	ldr	r2, [pc, #12]	; (8003a08 <vTaskSuspendAll+0x18>)
 80039fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039fe:	bf00      	nop
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	20000500 	.word	0x20000500

08003a0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a1a:	4b41      	ldr	r3, [pc, #260]	; (8003b20 <xTaskResumeAll+0x114>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10a      	bne.n	8003a38 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	603b      	str	r3, [r7, #0]
}
 8003a34:	bf00      	nop
 8003a36:	e7fe      	b.n	8003a36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a38:	f000 fc1c 	bl	8004274 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a3c:	4b38      	ldr	r3, [pc, #224]	; (8003b20 <xTaskResumeAll+0x114>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	4a37      	ldr	r2, [pc, #220]	; (8003b20 <xTaskResumeAll+0x114>)
 8003a44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a46:	4b36      	ldr	r3, [pc, #216]	; (8003b20 <xTaskResumeAll+0x114>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d161      	bne.n	8003b12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a4e:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <xTaskResumeAll+0x118>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d05d      	beq.n	8003b12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a56:	e02e      	b.n	8003ab6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a58:	4b33      	ldr	r3, [pc, #204]	; (8003b28 <xTaskResumeAll+0x11c>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3318      	adds	r3, #24
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fd71 	bl	800354c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fd6c 	bl	800354c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	2201      	movs	r2, #1
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <xTaskResumeAll+0x120>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	4a2a      	ldr	r2, [pc, #168]	; (8003b2c <xTaskResumeAll+0x120>)
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4a27      	ldr	r2, [pc, #156]	; (8003b30 <xTaskResumeAll+0x124>)
 8003a94:	441a      	add	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f7ff fcf8 	bl	8003492 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa6:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <xTaskResumeAll+0x128>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d302      	bcc.n	8003ab6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003ab0:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <xTaskResumeAll+0x12c>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ab6:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <xTaskResumeAll+0x11c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1cc      	bne.n	8003a58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ac4:	f000 fa08 	bl	8003ed8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ac8:	4b1c      	ldr	r3, [pc, #112]	; (8003b3c <xTaskResumeAll+0x130>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d010      	beq.n	8003af6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ad4:	f000 f836 	bl	8003b44 <xTaskIncrementTick>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003ade:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <xTaskResumeAll+0x12c>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f1      	bne.n	8003ad4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003af0:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <xTaskResumeAll+0x130>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <xTaskResumeAll+0x12c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003afe:	2301      	movs	r3, #1
 8003b00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b02:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <xTaskResumeAll+0x134>)
 8003b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b12:	f000 fbdf 	bl	80042d4 <vPortExitCritical>

	return xAlreadyYielded;
 8003b16:	68bb      	ldr	r3, [r7, #8]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20000500 	.word	0x20000500
 8003b24:	200004d8 	.word	0x200004d8
 8003b28:	20000498 	.word	0x20000498
 8003b2c:	200004e0 	.word	0x200004e0
 8003b30:	200003dc 	.word	0x200003dc
 8003b34:	200003d8 	.word	0x200003d8
 8003b38:	200004ec 	.word	0x200004ec
 8003b3c:	200004e8 	.word	0x200004e8
 8003b40:	e000ed04 	.word	0xe000ed04

08003b44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b4e:	4b4e      	ldr	r3, [pc, #312]	; (8003c88 <xTaskIncrementTick+0x144>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f040 808e 	bne.w	8003c74 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b58:	4b4c      	ldr	r3, [pc, #304]	; (8003c8c <xTaskIncrementTick+0x148>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b60:	4a4a      	ldr	r2, [pc, #296]	; (8003c8c <xTaskIncrementTick+0x148>)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d120      	bne.n	8003bae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b6c:	4b48      	ldr	r3, [pc, #288]	; (8003c90 <xTaskIncrementTick+0x14c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <xTaskIncrementTick+0x48>
	__asm volatile
 8003b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	603b      	str	r3, [r7, #0]
}
 8003b88:	bf00      	nop
 8003b8a:	e7fe      	b.n	8003b8a <xTaskIncrementTick+0x46>
 8003b8c:	4b40      	ldr	r3, [pc, #256]	; (8003c90 <xTaskIncrementTick+0x14c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	4b40      	ldr	r3, [pc, #256]	; (8003c94 <xTaskIncrementTick+0x150>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a3e      	ldr	r2, [pc, #248]	; (8003c90 <xTaskIncrementTick+0x14c>)
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	4a3e      	ldr	r2, [pc, #248]	; (8003c94 <xTaskIncrementTick+0x150>)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b3d      	ldr	r3, [pc, #244]	; (8003c98 <xTaskIncrementTick+0x154>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	4a3c      	ldr	r2, [pc, #240]	; (8003c98 <xTaskIncrementTick+0x154>)
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	f000 f995 	bl	8003ed8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bae:	4b3b      	ldr	r3, [pc, #236]	; (8003c9c <xTaskIncrementTick+0x158>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d348      	bcc.n	8003c4a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bb8:	4b35      	ldr	r3, [pc, #212]	; (8003c90 <xTaskIncrementTick+0x14c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bc2:	4b36      	ldr	r3, [pc, #216]	; (8003c9c <xTaskIncrementTick+0x158>)
 8003bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc8:	601a      	str	r2, [r3, #0]
					break;
 8003bca:	e03e      	b.n	8003c4a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bcc:	4b30      	ldr	r3, [pc, #192]	; (8003c90 <xTaskIncrementTick+0x14c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d203      	bcs.n	8003bec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003be4:	4a2d      	ldr	r2, [pc, #180]	; (8003c9c <xTaskIncrementTick+0x158>)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003bea:	e02e      	b.n	8003c4a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff fcab 	bl	800354c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	3318      	adds	r3, #24
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fca2 	bl	800354c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <xTaskIncrementTick+0x15c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	4a22      	ldr	r2, [pc, #136]	; (8003ca0 <xTaskIncrementTick+0x15c>)
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4a1f      	ldr	r2, [pc, #124]	; (8003ca4 <xTaskIncrementTick+0x160>)
 8003c28:	441a      	add	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4610      	mov	r0, r2
 8003c32:	f7ff fc2e 	bl	8003492 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <xTaskIncrementTick+0x164>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d3b9      	bcc.n	8003bb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c44:	2301      	movs	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c48:	e7b6      	b.n	8003bb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c4a:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <xTaskIncrementTick+0x164>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	4914      	ldr	r1, [pc, #80]	; (8003ca4 <xTaskIncrementTick+0x160>)
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d901      	bls.n	8003c66 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003c62:	2301      	movs	r3, #1
 8003c64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c66:	4b11      	ldr	r3, [pc, #68]	; (8003cac <xTaskIncrementTick+0x168>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	e004      	b.n	8003c7e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c74:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <xTaskIncrementTick+0x16c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	4a0d      	ldr	r2, [pc, #52]	; (8003cb0 <xTaskIncrementTick+0x16c>)
 8003c7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c7e:	697b      	ldr	r3, [r7, #20]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000500 	.word	0x20000500
 8003c8c:	200004dc 	.word	0x200004dc
 8003c90:	20000490 	.word	0x20000490
 8003c94:	20000494 	.word	0x20000494
 8003c98:	200004f0 	.word	0x200004f0
 8003c9c:	200004f8 	.word	0x200004f8
 8003ca0:	200004e0 	.word	0x200004e0
 8003ca4:	200003dc 	.word	0x200003dc
 8003ca8:	200003d8 	.word	0x200003d8
 8003cac:	200004ec 	.word	0x200004ec
 8003cb0:	200004e8 	.word	0x200004e8

08003cb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cba:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <vTaskSwitchContext+0xa4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cc2:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <vTaskSwitchContext+0xa8>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cc8:	e03f      	b.n	8003d4a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003cca:	4b24      	ldr	r3, [pc, #144]	; (8003d5c <vTaskSwitchContext+0xa8>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd0:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <vTaskSwitchContext+0xac>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	fab3 f383 	clz	r3, r3
 8003cdc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003cde:	7afb      	ldrb	r3, [r7, #11]
 8003ce0:	f1c3 031f 	rsb	r3, r3, #31
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	491f      	ldr	r1, [pc, #124]	; (8003d64 <vTaskSwitchContext+0xb0>)
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	607b      	str	r3, [r7, #4]
}
 8003d0c:	bf00      	nop
 8003d0e:	e7fe      	b.n	8003d0e <vTaskSwitchContext+0x5a>
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4613      	mov	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4a12      	ldr	r2, [pc, #72]	; (8003d64 <vTaskSwitchContext+0xb0>)
 8003d1c:	4413      	add	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	3308      	adds	r3, #8
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d104      	bne.n	8003d40 <vTaskSwitchContext+0x8c>
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	605a      	str	r2, [r3, #4]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	4a08      	ldr	r2, [pc, #32]	; (8003d68 <vTaskSwitchContext+0xb4>)
 8003d48:	6013      	str	r3, [r2, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20000500 	.word	0x20000500
 8003d5c:	200004ec 	.word	0x200004ec
 8003d60:	200004e0 	.word	0x200004e0
 8003d64:	200003dc 	.word	0x200003dc
 8003d68:	200003d8 	.word	0x200003d8

08003d6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d74:	f000 f852 	bl	8003e1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <prvIdleTask+0x28>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d9f9      	bls.n	8003d74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <prvIdleTask+0x2c>)
 8003d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d90:	e7f0      	b.n	8003d74 <prvIdleTask+0x8>
 8003d92:	bf00      	nop
 8003d94:	200003dc 	.word	0x200003dc
 8003d98:	e000ed04 	.word	0xe000ed04

08003d9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003da2:	2300      	movs	r3, #0
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	e00c      	b.n	8003dc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <prvInitialiseTaskLists+0x60>)
 8003db4:	4413      	add	r3, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fb3e 	bl	8003438 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	607b      	str	r3, [r7, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b06      	cmp	r3, #6
 8003dc6:	d9ef      	bls.n	8003da8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003dc8:	480d      	ldr	r0, [pc, #52]	; (8003e00 <prvInitialiseTaskLists+0x64>)
 8003dca:	f7ff fb35 	bl	8003438 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dce:	480d      	ldr	r0, [pc, #52]	; (8003e04 <prvInitialiseTaskLists+0x68>)
 8003dd0:	f7ff fb32 	bl	8003438 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dd4:	480c      	ldr	r0, [pc, #48]	; (8003e08 <prvInitialiseTaskLists+0x6c>)
 8003dd6:	f7ff fb2f 	bl	8003438 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dda:	480c      	ldr	r0, [pc, #48]	; (8003e0c <prvInitialiseTaskLists+0x70>)
 8003ddc:	f7ff fb2c 	bl	8003438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003de0:	480b      	ldr	r0, [pc, #44]	; (8003e10 <prvInitialiseTaskLists+0x74>)
 8003de2:	f7ff fb29 	bl	8003438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <prvInitialiseTaskLists+0x78>)
 8003de8:	4a05      	ldr	r2, [pc, #20]	; (8003e00 <prvInitialiseTaskLists+0x64>)
 8003dea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <prvInitialiseTaskLists+0x7c>)
 8003dee:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <prvInitialiseTaskLists+0x68>)
 8003df0:	601a      	str	r2, [r3, #0]
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200003dc 	.word	0x200003dc
 8003e00:	20000468 	.word	0x20000468
 8003e04:	2000047c 	.word	0x2000047c
 8003e08:	20000498 	.word	0x20000498
 8003e0c:	200004ac 	.word	0x200004ac
 8003e10:	200004c4 	.word	0x200004c4
 8003e14:	20000490 	.word	0x20000490
 8003e18:	20000494 	.word	0x20000494

08003e1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e22:	e019      	b.n	8003e58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e24:	f000 fa26 	bl	8004274 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e28:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <prvCheckTasksWaitingTermination+0x50>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fb89 	bl	800354c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <prvCheckTasksWaitingTermination+0x54>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	4a0b      	ldr	r2, [pc, #44]	; (8003e70 <prvCheckTasksWaitingTermination+0x54>)
 8003e42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <prvCheckTasksWaitingTermination+0x58>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <prvCheckTasksWaitingTermination+0x58>)
 8003e4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e4e:	f000 fa41 	bl	80042d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f810 	bl	8003e78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e58:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <prvCheckTasksWaitingTermination+0x58>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e1      	bne.n	8003e24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200004ac 	.word	0x200004ac
 8003e70:	200004d8 	.word	0x200004d8
 8003e74:	200004c0 	.word	0x200004c0

08003e78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d108      	bne.n	8003e9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fb9e 	bl	80045d0 <vPortFree>
				vPortFree( pxTCB );
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fb9b 	bl	80045d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e9a:	e018      	b.n	8003ece <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d103      	bne.n	8003eae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fb92 	bl	80045d0 <vPortFree>
	}
 8003eac:	e00f      	b.n	8003ece <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d00a      	beq.n	8003ece <prvDeleteTCB+0x56>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	60fb      	str	r3, [r7, #12]
}
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <prvDeleteTCB+0x54>
	}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ede:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <prvResetNextTaskUnblockTime+0x38>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d104      	bne.n	8003ef2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <prvResetNextTaskUnblockTime+0x3c>)
 8003eea:	f04f 32ff 	mov.w	r2, #4294967295
 8003eee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ef0:	e008      	b.n	8003f04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ef2:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <prvResetNextTaskUnblockTime+0x38>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4a04      	ldr	r2, [pc, #16]	; (8003f14 <prvResetNextTaskUnblockTime+0x3c>)
 8003f02:	6013      	str	r3, [r2, #0]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	20000490 	.word	0x20000490
 8003f14:	200004f8 	.word	0x200004f8

08003f18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <xTaskGetSchedulerState+0x34>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d102      	bne.n	8003f2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f26:	2301      	movs	r3, #1
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	e008      	b.n	8003f3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f2c:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <xTaskGetSchedulerState+0x38>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f34:	2302      	movs	r3, #2
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	e001      	b.n	8003f3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f3e:	687b      	ldr	r3, [r7, #4]
	}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	200004e4 	.word	0x200004e4
 8003f50:	20000500 	.word	0x20000500

08003f54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f5e:	4b29      	ldr	r3, [pc, #164]	; (8004004 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f64:	4b28      	ldr	r3, [pc, #160]	; (8004008 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff faee 	bl	800354c <uxListRemove>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10b      	bne.n	8003f8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f76:	4b24      	ldr	r3, [pc, #144]	; (8004008 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43da      	mvns	r2, r3
 8003f84:	4b21      	ldr	r3, [pc, #132]	; (800400c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	4a20      	ldr	r2, [pc, #128]	; (800400c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d10a      	bne.n	8003fac <prvAddCurrentTaskToDelayedList+0x58>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f9c:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	481a      	ldr	r0, [pc, #104]	; (8004010 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003fa6:	f7ff fa74 	bl	8003492 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003faa:	e026      	b.n	8003ffa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fb4:	4b14      	ldr	r3, [pc, #80]	; (8004008 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d209      	bcs.n	8003fd8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fc4:	4b13      	ldr	r3, [pc, #76]	; (8004014 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f7ff fa82 	bl	80034da <vListInsert>
}
 8003fd6:	e010      	b.n	8003ffa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	f7ff fa78 	bl	80034da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fea:	4b0c      	ldr	r3, [pc, #48]	; (800401c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d202      	bcs.n	8003ffa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ff4:	4a09      	ldr	r2, [pc, #36]	; (800401c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	6013      	str	r3, [r2, #0]
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	200004dc 	.word	0x200004dc
 8004008:	200003d8 	.word	0x200003d8
 800400c:	200004e0 	.word	0x200004e0
 8004010:	200004c4 	.word	0x200004c4
 8004014:	20000494 	.word	0x20000494
 8004018:	20000490 	.word	0x20000490
 800401c:	200004f8 	.word	0x200004f8

08004020 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3b04      	subs	r3, #4
 8004030:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004038:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3b04      	subs	r3, #4
 800403e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f023 0201 	bic.w	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3b04      	subs	r3, #4
 800404e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004050:	4a0c      	ldr	r2, [pc, #48]	; (8004084 <pxPortInitialiseStack+0x64>)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3b14      	subs	r3, #20
 800405a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3b04      	subs	r3, #4
 8004066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f06f 0202 	mvn.w	r2, #2
 800406e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3b20      	subs	r3, #32
 8004074:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004076:	68fb      	ldr	r3, [r7, #12]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	08004089 	.word	0x08004089

08004088 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004092:	4b12      	ldr	r3, [pc, #72]	; (80040dc <prvTaskExitError+0x54>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d00a      	beq.n	80040b2 <prvTaskExitError+0x2a>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	60fb      	str	r3, [r7, #12]
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <prvTaskExitError+0x28>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	60bb      	str	r3, [r7, #8]
}
 80040c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040c6:	bf00      	nop
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0fc      	beq.n	80040c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040ce:	bf00      	nop
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	2000000c 	.word	0x2000000c

080040e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040e0:	4b07      	ldr	r3, [pc, #28]	; (8004100 <pxCurrentTCBConst2>)
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	6808      	ldr	r0, [r1, #0]
 80040e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ea:	f380 8809 	msr	PSP, r0
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8811 	msr	BASEPRI, r0
 80040fa:	4770      	bx	lr
 80040fc:	f3af 8000 	nop.w

08004100 <pxCurrentTCBConst2>:
 8004100:	200003d8 	.word	0x200003d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop

08004108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004108:	4808      	ldr	r0, [pc, #32]	; (800412c <prvPortStartFirstTask+0x24>)
 800410a:	6800      	ldr	r0, [r0, #0]
 800410c:	6800      	ldr	r0, [r0, #0]
 800410e:	f380 8808 	msr	MSP, r0
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f380 8814 	msr	CONTROL, r0
 800411a:	b662      	cpsie	i
 800411c:	b661      	cpsie	f
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	df00      	svc	0
 8004128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800412a:	bf00      	nop
 800412c:	e000ed08 	.word	0xe000ed08

08004130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004136:	4b46      	ldr	r3, [pc, #280]	; (8004250 <xPortStartScheduler+0x120>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a46      	ldr	r2, [pc, #280]	; (8004254 <xPortStartScheduler+0x124>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d10a      	bne.n	8004156 <xPortStartScheduler+0x26>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	613b      	str	r3, [r7, #16]
}
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004156:	4b3e      	ldr	r3, [pc, #248]	; (8004250 <xPortStartScheduler+0x120>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a3f      	ldr	r2, [pc, #252]	; (8004258 <xPortStartScheduler+0x128>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10a      	bne.n	8004176 <xPortStartScheduler+0x46>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	60fb      	str	r3, [r7, #12]
}
 8004172:	bf00      	nop
 8004174:	e7fe      	b.n	8004174 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004176:	4b39      	ldr	r3, [pc, #228]	; (800425c <xPortStartScheduler+0x12c>)
 8004178:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	22ff      	movs	r2, #255	; 0xff
 8004186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004198:	b2da      	uxtb	r2, r3
 800419a:	4b31      	ldr	r3, [pc, #196]	; (8004260 <xPortStartScheduler+0x130>)
 800419c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800419e:	4b31      	ldr	r3, [pc, #196]	; (8004264 <xPortStartScheduler+0x134>)
 80041a0:	2207      	movs	r2, #7
 80041a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041a4:	e009      	b.n	80041ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80041a6:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <xPortStartScheduler+0x134>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	4a2d      	ldr	r2, [pc, #180]	; (8004264 <xPortStartScheduler+0x134>)
 80041ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b80      	cmp	r3, #128	; 0x80
 80041c4:	d0ef      	beq.n	80041a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041c6:	4b27      	ldr	r3, [pc, #156]	; (8004264 <xPortStartScheduler+0x134>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f1c3 0307 	rsb	r3, r3, #7
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d00a      	beq.n	80041e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	60bb      	str	r3, [r7, #8]
}
 80041e4:	bf00      	nop
 80041e6:	e7fe      	b.n	80041e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041e8:	4b1e      	ldr	r3, [pc, #120]	; (8004264 <xPortStartScheduler+0x134>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <xPortStartScheduler+0x134>)
 80041f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041f2:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <xPortStartScheduler+0x134>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041fa:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <xPortStartScheduler+0x134>)
 80041fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004206:	4b18      	ldr	r3, [pc, #96]	; (8004268 <xPortStartScheduler+0x138>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a17      	ldr	r2, [pc, #92]	; (8004268 <xPortStartScheduler+0x138>)
 800420c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004212:	4b15      	ldr	r3, [pc, #84]	; (8004268 <xPortStartScheduler+0x138>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a14      	ldr	r2, [pc, #80]	; (8004268 <xPortStartScheduler+0x138>)
 8004218:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800421c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800421e:	f000 f8dd 	bl	80043dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <xPortStartScheduler+0x13c>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004228:	f000 f8fc 	bl	8004424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800422c:	4b10      	ldr	r3, [pc, #64]	; (8004270 <xPortStartScheduler+0x140>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a0f      	ldr	r2, [pc, #60]	; (8004270 <xPortStartScheduler+0x140>)
 8004232:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004236:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004238:	f7ff ff66 	bl	8004108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800423c:	f7ff fd3a 	bl	8003cb4 <vTaskSwitchContext>
	prvTaskExitError();
 8004240:	f7ff ff22 	bl	8004088 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	e000ed00 	.word	0xe000ed00
 8004254:	410fc271 	.word	0x410fc271
 8004258:	410fc270 	.word	0x410fc270
 800425c:	e000e400 	.word	0xe000e400
 8004260:	20000504 	.word	0x20000504
 8004264:	20000508 	.word	0x20000508
 8004268:	e000ed20 	.word	0xe000ed20
 800426c:	2000000c 	.word	0x2000000c
 8004270:	e000ef34 	.word	0xe000ef34

08004274 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	607b      	str	r3, [r7, #4]
}
 800428c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <vPortEnterCritical+0x58>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3301      	adds	r3, #1
 8004294:	4a0d      	ldr	r2, [pc, #52]	; (80042cc <vPortEnterCritical+0x58>)
 8004296:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004298:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <vPortEnterCritical+0x58>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d10f      	bne.n	80042c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042a0:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <vPortEnterCritical+0x5c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	603b      	str	r3, [r7, #0]
}
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <vPortEnterCritical+0x4a>
	}
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	2000000c 	.word	0x2000000c
 80042d0:	e000ed04 	.word	0xe000ed04

080042d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042da:	4b12      	ldr	r3, [pc, #72]	; (8004324 <vPortExitCritical+0x50>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10a      	bne.n	80042f8 <vPortExitCritical+0x24>
	__asm volatile
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	607b      	str	r3, [r7, #4]
}
 80042f4:	bf00      	nop
 80042f6:	e7fe      	b.n	80042f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <vPortExitCritical+0x50>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	4a09      	ldr	r2, [pc, #36]	; (8004324 <vPortExitCritical+0x50>)
 8004300:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004302:	4b08      	ldr	r3, [pc, #32]	; (8004324 <vPortExitCritical+0x50>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d105      	bne.n	8004316 <vPortExitCritical+0x42>
 800430a:	2300      	movs	r3, #0
 800430c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004314:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	2000000c 	.word	0x2000000c
	...

08004330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004330:	f3ef 8009 	mrs	r0, PSP
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	4b15      	ldr	r3, [pc, #84]	; (8004390 <pxCurrentTCBConst>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	f01e 0f10 	tst.w	lr, #16
 8004340:	bf08      	it	eq
 8004342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434a:	6010      	str	r0, [r2, #0]
 800434c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004354:	f380 8811 	msr	BASEPRI, r0
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f7ff fca8 	bl	8003cb4 <vTaskSwitchContext>
 8004364:	f04f 0000 	mov.w	r0, #0
 8004368:	f380 8811 	msr	BASEPRI, r0
 800436c:	bc09      	pop	{r0, r3}
 800436e:	6819      	ldr	r1, [r3, #0]
 8004370:	6808      	ldr	r0, [r1, #0]
 8004372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004376:	f01e 0f10 	tst.w	lr, #16
 800437a:	bf08      	it	eq
 800437c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004380:	f380 8809 	msr	PSP, r0
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	f3af 8000 	nop.w

08004390 <pxCurrentTCBConst>:
 8004390:	200003d8 	.word	0x200003d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop

08004398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	607b      	str	r3, [r7, #4]
}
 80043b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043b2:	f7ff fbc7 	bl	8003b44 <xTaskIncrementTick>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <xPortSysTickHandler+0x40>)
 80043be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	2300      	movs	r3, #0
 80043c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	f383 8811 	msr	BASEPRI, r3
}
 80043ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	e000ed04 	.word	0xe000ed04

080043dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <vPortSetupTimerInterrupt+0x34>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <vPortSetupTimerInterrupt+0x38>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <vPortSetupTimerInterrupt+0x3c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a0a      	ldr	r2, [pc, #40]	; (800441c <vPortSetupTimerInterrupt+0x40>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	099b      	lsrs	r3, r3, #6
 80043f8:	4a09      	ldr	r2, [pc, #36]	; (8004420 <vPortSetupTimerInterrupt+0x44>)
 80043fa:	3b01      	subs	r3, #1
 80043fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043fe:	4b04      	ldr	r3, [pc, #16]	; (8004410 <vPortSetupTimerInterrupt+0x34>)
 8004400:	2207      	movs	r2, #7
 8004402:	601a      	str	r2, [r3, #0]
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	e000e010 	.word	0xe000e010
 8004414:	e000e018 	.word	0xe000e018
 8004418:	20000000 	.word	0x20000000
 800441c:	10624dd3 	.word	0x10624dd3
 8004420:	e000e014 	.word	0xe000e014

08004424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004434 <vPortEnableVFP+0x10>
 8004428:	6801      	ldr	r1, [r0, #0]
 800442a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800442e:	6001      	str	r1, [r0, #0]
 8004430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004432:	bf00      	nop
 8004434:	e000ed88 	.word	0xe000ed88

08004438 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004440:	2300      	movs	r3, #0
 8004442:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004444:	f7ff fad4 	bl	80039f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004448:	4b5b      	ldr	r3, [pc, #364]	; (80045b8 <pvPortMalloc+0x180>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004450:	f000 f920 	bl	8004694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004454:	4b59      	ldr	r3, [pc, #356]	; (80045bc <pvPortMalloc+0x184>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	f040 8093 	bne.w	8004588 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01d      	beq.n	80044a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004468:	2208      	movs	r2, #8
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4413      	add	r3, r2
 800446e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	2b00      	cmp	r3, #0
 8004478:	d014      	beq.n	80044a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f023 0307 	bic.w	r3, r3, #7
 8004480:	3308      	adds	r3, #8
 8004482:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <pvPortMalloc+0x6c>
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	617b      	str	r3, [r7, #20]
}
 80044a0:	bf00      	nop
 80044a2:	e7fe      	b.n	80044a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d06e      	beq.n	8004588 <pvPortMalloc+0x150>
 80044aa:	4b45      	ldr	r3, [pc, #276]	; (80045c0 <pvPortMalloc+0x188>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d869      	bhi.n	8004588 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044b4:	4b43      	ldr	r3, [pc, #268]	; (80045c4 <pvPortMalloc+0x18c>)
 80044b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044b8:	4b42      	ldr	r3, [pc, #264]	; (80045c4 <pvPortMalloc+0x18c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044be:	e004      	b.n	80044ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d903      	bls.n	80044dc <pvPortMalloc+0xa4>
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1f1      	bne.n	80044c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044dc:	4b36      	ldr	r3, [pc, #216]	; (80045b8 <pvPortMalloc+0x180>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d050      	beq.n	8004588 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2208      	movs	r2, #8
 80044ec:	4413      	add	r3, r2
 80044ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	1ad2      	subs	r2, r2, r3
 8004500:	2308      	movs	r3, #8
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	429a      	cmp	r2, r3
 8004506:	d91f      	bls.n	8004548 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <pvPortMalloc+0xf8>
	__asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	613b      	str	r3, [r7, #16]
}
 800452c:	bf00      	nop
 800452e:	e7fe      	b.n	800452e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	1ad2      	subs	r2, r2, r3
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004542:	69b8      	ldr	r0, [r7, #24]
 8004544:	f000 f908 	bl	8004758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004548:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <pvPortMalloc+0x188>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	4a1b      	ldr	r2, [pc, #108]	; (80045c0 <pvPortMalloc+0x188>)
 8004554:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004556:	4b1a      	ldr	r3, [pc, #104]	; (80045c0 <pvPortMalloc+0x188>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <pvPortMalloc+0x190>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d203      	bcs.n	800456a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004562:	4b17      	ldr	r3, [pc, #92]	; (80045c0 <pvPortMalloc+0x188>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <pvPortMalloc+0x190>)
 8004568:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	4b13      	ldr	r3, [pc, #76]	; (80045bc <pvPortMalloc+0x184>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	431a      	orrs	r2, r3
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800457e:	4b13      	ldr	r3, [pc, #76]	; (80045cc <pvPortMalloc+0x194>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3301      	adds	r3, #1
 8004584:	4a11      	ldr	r2, [pc, #68]	; (80045cc <pvPortMalloc+0x194>)
 8004586:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004588:	f7ff fa40 	bl	8003a0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <pvPortMalloc+0x174>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	60fb      	str	r3, [r7, #12]
}
 80045a8:	bf00      	nop
 80045aa:	e7fe      	b.n	80045aa <pvPortMalloc+0x172>
	return pvReturn;
 80045ac:	69fb      	ldr	r3, [r7, #28]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3728      	adds	r7, #40	; 0x28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20004114 	.word	0x20004114
 80045bc:	20004128 	.word	0x20004128
 80045c0:	20004118 	.word	0x20004118
 80045c4:	2000410c 	.word	0x2000410c
 80045c8:	2000411c 	.word	0x2000411c
 80045cc:	20004120 	.word	0x20004120

080045d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d04d      	beq.n	800467e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045e2:	2308      	movs	r3, #8
 80045e4:	425b      	negs	r3, r3
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4413      	add	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	4b24      	ldr	r3, [pc, #144]	; (8004688 <vPortFree+0xb8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <vPortFree+0x44>
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	60fb      	str	r3, [r7, #12]
}
 8004610:	bf00      	nop
 8004612:	e7fe      	b.n	8004612 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <vPortFree+0x62>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	60bb      	str	r3, [r7, #8]
}
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	4b14      	ldr	r3, [pc, #80]	; (8004688 <vPortFree+0xb8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4013      	ands	r3, r2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01e      	beq.n	800467e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d11a      	bne.n	800467e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <vPortFree+0xb8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	43db      	mvns	r3, r3
 8004652:	401a      	ands	r2, r3
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004658:	f7ff f9ca 	bl	80039f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <vPortFree+0xbc>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4413      	add	r3, r2
 8004666:	4a09      	ldr	r2, [pc, #36]	; (800468c <vPortFree+0xbc>)
 8004668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800466a:	6938      	ldr	r0, [r7, #16]
 800466c:	f000 f874 	bl	8004758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <vPortFree+0xc0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3301      	adds	r3, #1
 8004676:	4a06      	ldr	r2, [pc, #24]	; (8004690 <vPortFree+0xc0>)
 8004678:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800467a:	f7ff f9c7 	bl	8003a0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800467e:	bf00      	nop
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20004128 	.word	0x20004128
 800468c:	20004118 	.word	0x20004118
 8004690:	20004124 	.word	0x20004124

08004694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800469a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800469e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046a0:	4b27      	ldr	r3, [pc, #156]	; (8004740 <prvHeapInit+0xac>)
 80046a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3307      	adds	r3, #7
 80046b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0307 	bic.w	r3, r3, #7
 80046ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <prvHeapInit+0xac>)
 80046c4:	4413      	add	r3, r2
 80046c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046cc:	4a1d      	ldr	r2, [pc, #116]	; (8004744 <prvHeapInit+0xb0>)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046d2:	4b1c      	ldr	r3, [pc, #112]	; (8004744 <prvHeapInit+0xb0>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	4413      	add	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046e0:	2208      	movs	r2, #8
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0307 	bic.w	r3, r3, #7
 80046ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a15      	ldr	r2, [pc, #84]	; (8004748 <prvHeapInit+0xb4>)
 80046f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046f6:	4b14      	ldr	r3, [pc, #80]	; (8004748 <prvHeapInit+0xb4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046fe:	4b12      	ldr	r3, [pc, #72]	; (8004748 <prvHeapInit+0xb4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	1ad2      	subs	r2, r2, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004714:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <prvHeapInit+0xb4>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4a0a      	ldr	r2, [pc, #40]	; (800474c <prvHeapInit+0xb8>)
 8004722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4a09      	ldr	r2, [pc, #36]	; (8004750 <prvHeapInit+0xbc>)
 800472a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800472c:	4b09      	ldr	r3, [pc, #36]	; (8004754 <prvHeapInit+0xc0>)
 800472e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004732:	601a      	str	r2, [r3, #0]
}
 8004734:	bf00      	nop
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	2000050c 	.word	0x2000050c
 8004744:	2000410c 	.word	0x2000410c
 8004748:	20004114 	.word	0x20004114
 800474c:	2000411c 	.word	0x2000411c
 8004750:	20004118 	.word	0x20004118
 8004754:	20004128 	.word	0x20004128

08004758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004760:	4b28      	ldr	r3, [pc, #160]	; (8004804 <prvInsertBlockIntoFreeList+0xac>)
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e002      	b.n	800476c <prvInsertBlockIntoFreeList+0x14>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	429a      	cmp	r2, r3
 8004774:	d8f7      	bhi.n	8004766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	4413      	add	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	429a      	cmp	r2, r3
 8004786:	d108      	bne.n	800479a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	441a      	add	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	441a      	add	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d118      	bne.n	80047e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <prvInsertBlockIntoFreeList+0xb0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d00d      	beq.n	80047d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	441a      	add	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	e008      	b.n	80047e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047d6:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <prvInsertBlockIntoFreeList+0xb0>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e003      	b.n	80047e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d002      	beq.n	80047f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047f6:	bf00      	nop
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	2000410c 	.word	0x2000410c
 8004808:	20004114 	.word	0x20004114

0800480c <__libc_init_array>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	4d0d      	ldr	r5, [pc, #52]	; (8004844 <__libc_init_array+0x38>)
 8004810:	4c0d      	ldr	r4, [pc, #52]	; (8004848 <__libc_init_array+0x3c>)
 8004812:	1b64      	subs	r4, r4, r5
 8004814:	10a4      	asrs	r4, r4, #2
 8004816:	2600      	movs	r6, #0
 8004818:	42a6      	cmp	r6, r4
 800481a:	d109      	bne.n	8004830 <__libc_init_array+0x24>
 800481c:	4d0b      	ldr	r5, [pc, #44]	; (800484c <__libc_init_array+0x40>)
 800481e:	4c0c      	ldr	r4, [pc, #48]	; (8004850 <__libc_init_array+0x44>)
 8004820:	f000 f820 	bl	8004864 <_init>
 8004824:	1b64      	subs	r4, r4, r5
 8004826:	10a4      	asrs	r4, r4, #2
 8004828:	2600      	movs	r6, #0
 800482a:	42a6      	cmp	r6, r4
 800482c:	d105      	bne.n	800483a <__libc_init_array+0x2e>
 800482e:	bd70      	pop	{r4, r5, r6, pc}
 8004830:	f855 3b04 	ldr.w	r3, [r5], #4
 8004834:	4798      	blx	r3
 8004836:	3601      	adds	r6, #1
 8004838:	e7ee      	b.n	8004818 <__libc_init_array+0xc>
 800483a:	f855 3b04 	ldr.w	r3, [r5], #4
 800483e:	4798      	blx	r3
 8004840:	3601      	adds	r6, #1
 8004842:	e7f2      	b.n	800482a <__libc_init_array+0x1e>
 8004844:	080048cc 	.word	0x080048cc
 8004848:	080048cc 	.word	0x080048cc
 800484c:	080048cc 	.word	0x080048cc
 8004850:	080048d0 	.word	0x080048d0

08004854 <memset>:
 8004854:	4402      	add	r2, r0
 8004856:	4603      	mov	r3, r0
 8004858:	4293      	cmp	r3, r2
 800485a:	d100      	bne.n	800485e <memset+0xa>
 800485c:	4770      	bx	lr
 800485e:	f803 1b01 	strb.w	r1, [r3], #1
 8004862:	e7f9      	b.n	8004858 <memset+0x4>

08004864 <_init>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	bf00      	nop
 8004868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486a:	bc08      	pop	{r3}
 800486c:	469e      	mov	lr, r3
 800486e:	4770      	bx	lr

08004870 <_fini>:
 8004870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004872:	bf00      	nop
 8004874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004876:	bc08      	pop	{r3}
 8004878:	469e      	mov	lr, r3
 800487a:	4770      	bx	lr
